{"ast":null,"code":"class SocketService {\n  static getInstance() {\n    if (!SocketService.instance) {\n      SocketService.instance = new SocketService();\n    }\n    return SocketService.instance;\n  }\n  constructor() {\n    this.socket = null;\n    this.callbacks = {};\n    this.retryCount = 0;\n    this.baseUrl = `http://${window.location.hostname}:3001`; // API REST\n  }\n  connect(callback) {\n    try {\n      const protocol = window.location.protocol === 'https:' ? 'wss' : 'ws';\n      const host = window.location.hostname;\n      this.socket = new WebSocket(`${protocol}://${host}:8080`);\n      this.socket.onopen = () => {\n        console.log('✅ WebSocket conectado');\n        this.retryCount = 0;\n        if (callback) callback();\n      };\n      this.socket.onmessage = msg => {\n        try {\n          const data = JSON.parse(msg.data);\n          if (this.callbacks[data.type]) {\n            this.callbacks[data.type](data);\n          }\n        } catch (error) {\n          console.error('❌ Error procesando mensaje:', error);\n        }\n      };\n      this.socket.onclose = () => {\n        console.warn('⚠️ WebSocket desconectado');\n        this.scheduleReconnect();\n      };\n      this.socket.onerror = error => {\n        console.error('❌ Error WebSocket:', error);\n      };\n    } catch (error) {\n      console.error('❌ Error al conectar:', error);\n      this.scheduleReconnect();\n    }\n  }\n  scheduleReconnect() {\n    const delay = Math.min(1000 * 2 ** this.retryCount, 30000);\n    this.retryCount += 1;\n    console.log(`🔁 Reintentando conexión WebSocket en ${delay / 1000}s...`);\n    setTimeout(() => this.connect(), delay);\n  }\n  on(event, callback) {\n    this.callbacks[event] = callback;\n  }\n  send(data) {\n    var _this$socket;\n    if (((_this$socket = this.socket) === null || _this$socket === void 0 ? void 0 : _this$socket.readyState) === WebSocket.OPEN) {\n      this.socket.send(JSON.stringify(data));\n    } else {\n      console.error('❌ WebSocket no está conectado, no se puede enviar el mensaje');\n    }\n  }\n\n  // Métodos REST API\n  async fetchMenu() {\n    const response = await fetch(`${this.baseUrl}/dishes`);\n    return await response.json();\n  }\n  async fetchAlcohol() {\n    const response = await fetch(`${this.baseUrl}/alcohol`);\n    return await response.json();\n  }\n  async createOrder(order) {\n    const response = await fetch(`${this.baseUrl}/orders`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(order)\n    });\n    return await response.json();\n  }\n  async completeOrder(orderId) {\n    const response = await fetch(`${this.baseUrl}/orders/${orderId}`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        status: 'completed'\n      })\n    });\n    return await response.json();\n  }\n}\n\n// Exportar instancia única\nSocketService.instance = null;\nexport const socket = SocketService.getInstance();\n\n// Inicializar conexión y escuchar eventos\nexport const initializeSocketConnection = onOrderUpdate => {\n  socket.on('initial_data', onOrderUpdate);\n  socket.on('update', onOrderUpdate);\n  socket.connect();\n};\n\n// Exportar funciones de uso externo\nexport const fetchMenuItems = () => socket.fetchMenu();\nexport const fetchAlcoholItems = () => socket.fetchAlcohol();\nexport const placeNewOrder = async order => {\n  await socket.createOrder(order);\n  socket.send({\n    type: 'new_order',\n    order\n  });\n};\nexport const markOrderAsCompleted = async orderId => {\n  await socket.completeOrder(orderId);\n  socket.send({\n    type: 'complete_order',\n    orderId\n  });\n};","map":{"version":3,"names":["SocketService","getInstance","instance","constructor","socket","callbacks","retryCount","baseUrl","window","location","hostname","connect","callback","protocol","host","WebSocket","onopen","console","log","onmessage","msg","data","JSON","parse","type","error","onclose","warn","scheduleReconnect","onerror","delay","Math","min","setTimeout","on","event","send","_this$socket","readyState","OPEN","stringify","fetchMenu","response","fetch","json","fetchAlcohol","createOrder","order","method","headers","body","completeOrder","orderId","status","initializeSocketConnection","onOrderUpdate","fetchMenuItems","fetchAlcoholItems","placeNewOrder","markOrderAsCompleted"],"sources":["C:/Users/karen/OneDrive/Escritorio/Correa3/Correa/client/src/services/socket.js"],"sourcesContent":["class SocketService {\r\n  static instance = null;\r\n\r\n  static getInstance() {\r\n    if (!SocketService.instance) {\r\n      SocketService.instance = new SocketService();\r\n    }\r\n    return SocketService.instance;\r\n  }\r\n\r\n  constructor() {\r\n    this.socket = null;\r\n    this.callbacks = {};\r\n    this.retryCount = 0;\r\n    this.baseUrl = `http://${window.location.hostname}:3001`; // API REST\r\n  }\r\n\r\n  connect(callback) {\r\n    try {\r\n      const protocol = window.location.protocol === 'https:' ? 'wss' : 'ws';\r\n      const host = window.location.hostname;\r\n      this.socket = new WebSocket(`${protocol}://${host}:8080`);\r\n\r\n      this.socket.onopen = () => {\r\n        console.log('✅ WebSocket conectado');\r\n        this.retryCount = 0;\r\n        if (callback) callback();\r\n      };\r\n\r\n      this.socket.onmessage = (msg) => {\r\n        try {\r\n          const data = JSON.parse(msg.data);\r\n          if (this.callbacks[data.type]) {\r\n            this.callbacks[data.type](data);\r\n          }\r\n        } catch (error) {\r\n          console.error('❌ Error procesando mensaje:', error);\r\n        }\r\n      };\r\n\r\n      this.socket.onclose = () => {\r\n        console.warn('⚠️ WebSocket desconectado');\r\n        this.scheduleReconnect();\r\n      };\r\n\r\n      this.socket.onerror = (error) => {\r\n        console.error('❌ Error WebSocket:', error);\r\n      };\r\n\r\n    } catch (error) {\r\n      console.error('❌ Error al conectar:', error);\r\n      this.scheduleReconnect();\r\n    }\r\n  }\r\n\r\n  scheduleReconnect() {\r\n    const delay = Math.min(1000 * (2 ** this.retryCount), 30000);\r\n    this.retryCount += 1;\r\n    console.log(`🔁 Reintentando conexión WebSocket en ${delay / 1000}s...`);\r\n    setTimeout(() => this.connect(), delay);\r\n  }\r\n\r\n  on(event, callback) {\r\n    this.callbacks[event] = callback;\r\n  }\r\n\r\n  send(data) {\r\n    if (this.socket?.readyState === WebSocket.OPEN) {\r\n      this.socket.send(JSON.stringify(data));\r\n    } else {\r\n      console.error('❌ WebSocket no está conectado, no se puede enviar el mensaje');\r\n    }\r\n  }\r\n\r\n  // Métodos REST API\r\n  async fetchMenu() {\r\n    const response = await fetch(`${this.baseUrl}/dishes`);\r\n    return await response.json();\r\n  }\r\n\r\n  async fetchAlcohol() {\r\n    const response = await fetch(`${this.baseUrl}/alcohol`);\r\n    return await response.json();\r\n  }\r\n\r\n  async createOrder(order) {\r\n    const response = await fetch(`${this.baseUrl}/orders`, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(order)\r\n    });\r\n    return await response.json();\r\n  }\r\n\r\n  async completeOrder(orderId) {\r\n    const response = await fetch(`${this.baseUrl}/orders/${orderId}`, {\r\n      method: 'PATCH',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ status: 'completed' })\r\n    });\r\n    return await response.json();\r\n  }\r\n}\r\n\r\n// Exportar instancia única\r\nexport const socket = SocketService.getInstance();\r\n\r\n// Inicializar conexión y escuchar eventos\r\nexport const initializeSocketConnection = (onOrderUpdate) => {\r\n  socket.on('initial_data', onOrderUpdate);\r\n  socket.on('update', onOrderUpdate);\r\n  socket.connect();\r\n};\r\n\r\n// Exportar funciones de uso externo\r\nexport const fetchMenuItems = () => socket.fetchMenu();\r\nexport const fetchAlcoholItems = () => socket.fetchAlcohol();\r\nexport const placeNewOrder = async (order) => {\r\n  await socket.createOrder(order);\r\n  socket.send({ type: 'new_order', order });\r\n};\r\nexport const markOrderAsCompleted = async (orderId) => {\r\n  await socket.completeOrder(orderId);\r\n  socket.send({ type: 'complete_order', orderId });\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}