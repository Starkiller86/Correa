{"ast":null,"code":"// services/BarSocket.js\n// Servicio WS/REST del Bar y Bartender (namespace 'bar')\n\nclass BarSocket {\n  static getInstance() {\n    if (!BarSocket.instance) BarSocket.instance = new BarSocket();\n    return BarSocket.instance;\n  }\n  constructor() {\n    const hostname = window.location.hostname;\n    this.wsUrl = `ws://${hostname}:8080`;\n    this.baseUrl = `http://${hostname}:3001`;\n    this.socket = null;\n    this.handlers = {}; // Mapa: type -> handler\n    this.retryCount = 0;\n  }\n  connect() {\n    if (this.socket && this.socket.readyState === WebSocket.OPEN) return;\n    this.socket = new WebSocket(this.wsUrl);\n    this.socket.onopen = () => {\n      this.retryCount = 0;\n      // Solicitar datos iniciales del bar (opcional según tu server)\n      this.emit('bar:request_initial', {});\n    };\n    this.socket.onmessage = evt => {\n      let payload;\n      try {\n        payload = JSON.parse(evt.data);\n      } catch {\n        return;\n      }\n      const {\n        type\n      } = payload || {};\n      if (type && this.handlers[type]) this.handlers[type](payload);else if (this.handlers['*']) this.handlers['*'](payload);\n    };\n    this.socket.onclose = () => this.scheduleReconnect();\n    this.socket.onerror = err => console.error('⚠️ WS Bar error:', err);\n  }\n  scheduleReconnect() {\n    const delay = Math.min(1000 * 2 ** this.retryCount, 30000);\n    this.retryCount += 1;\n    setTimeout(() => this.connect(), delay);\n  }\n  on(type, cb) {\n    this.handlers[type] = cb;\n  }\n  async waitForOpen(retries = 8, delay = 400) {\n    for (let i = 0; i < retries; i++) {\n      var _this$socket;\n      if (((_this$socket = this.socket) === null || _this$socket === void 0 ? void 0 : _this$socket.readyState) === WebSocket.OPEN) return;\n      await new Promise(r => setTimeout(r, delay));\n    }\n    throw new Error('WebSocket no disponible');\n  }\n\n  // ✅ FIX: emit correcto (antes había error en el spread del data)\n  emit(type, data = {}) {\n    var _this$socket2;\n    const msg = JSON.stringify({\n      type,\n      ...data\n    });\n    if (((_this$socket2 = this.socket) === null || _this$socket2 === void 0 ? void 0 : _this$socket2.readyState) === WebSocket.OPEN) {\n      this.socket.send(msg);\n    } else {\n      this.waitForOpen().then(() => this.socket.send(msg)).catch(e => console.error('No se pudo enviar por WS:', e));\n    }\n  }\n\n  // ===== REST (bar comparte /orders con cocina)\n  async createOrder(order) {\n    const res = await fetch(`${this.baseUrl}/orders`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(order)\n    });\n    if (!res.ok) throw new Error('REST /orders falló');\n    return res.json();\n  }\n  async completeOrder(orderId) {\n    const res = await fetch(`${this.baseUrl}/orders/${orderId}`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        status: 'completed'\n      })\n    });\n    if (!res.ok) throw new Error('REST /orders/:id falló');\n    return res.json();\n  }\n\n  // Acciones de alto nivel\n  async placeOrder(order) {\n    const saved = await this.createOrder(order); // Guarda REST\n    await this.waitForOpen();\n    this.emit('bar:new_order', {\n      order: saved\n    }); // Notifica WS (namespace bar)\n    return saved;\n  }\n  async markCompleted(orderId) {\n    const saved = await this.completeOrder(orderId);\n    await this.waitForOpen();\n    this.emit('bar:complete_order', {\n      orderId\n    }); // Notifica WS\n    return saved;\n  }\n}\nBarSocket.instance = null;\nexport const barSocket = BarSocket.getInstance();\nexport const initBarSocket = onOrdersUpdate => {\n  // Escucha todo lo del namespace bar\n  barSocket.on('bar:initial_data', ({\n    orders\n  }) => onOrdersUpdate === null || onOrdersUpdate === void 0 ? void 0 : onOrdersUpdate(orders || []));\n  barSocket.on('bar:update', ({\n    orders\n  }) => onOrdersUpdate === null || onOrdersUpdate === void 0 ? void 0 : onOrdersUpdate(orders || []));\n  // ✅ también si el server solo manda new_order\n  barSocket.on('bar:new_order', ({\n    order\n  }) => onOrdersUpdate === null || onOrdersUpdate === void 0 ? void 0 : onOrdersUpdate(Array.isArray(order) ? order : [order]));\n  barSocket.on('*', payload => console.debug('WS payload', payload));\n  barSocket.connect();\n};\nexport const placeBarOrder = order => barSocket.placeOrder(order);\nexport const markBarOrderCompleted = orderId => barSocket.markCompleted(orderId);","map":{"version":3,"names":["BarSocket","getInstance","instance","constructor","hostname","window","location","wsUrl","baseUrl","socket","handlers","retryCount","connect","readyState","WebSocket","OPEN","onopen","emit","onmessage","evt","payload","JSON","parse","data","type","onclose","scheduleReconnect","onerror","err","console","error","delay","Math","min","setTimeout","on","cb","waitForOpen","retries","i","_this$socket","Promise","r","Error","_this$socket2","msg","stringify","send","then","catch","e","createOrder","order","res","fetch","method","headers","body","ok","json","completeOrder","orderId","status","placeOrder","saved","markCompleted","barSocket","initBarSocket","onOrdersUpdate","orders","Array","isArray","debug","placeBarOrder","markBarOrderCompleted"],"sources":["C:/Users/karen/OneDrive/Escritorio/Correa3/Correa/client/src/services/BarSocket.js"],"sourcesContent":["// services/BarSocket.js\r\n// Servicio WS/REST del Bar y Bartender (namespace 'bar')\r\n\r\nclass BarSocket {\r\n  static instance = null;\r\n  static getInstance() {\r\n    if (!BarSocket.instance) BarSocket.instance = new BarSocket();\r\n    return BarSocket.instance;\r\n  }\r\n\r\n  constructor() {\r\n    const hostname = window.location.hostname;\r\n    this.wsUrl = `ws://${hostname}:8080`;\r\n    this.baseUrl = `http://${hostname}:3001`;\r\n    this.socket = null;\r\n    this.handlers = {};   // Mapa: type -> handler\r\n    this.retryCount = 0;\r\n  }\r\n\r\n  connect() {\r\n    if (this.socket && this.socket.readyState === WebSocket.OPEN) return;\r\n    this.socket = new WebSocket(this.wsUrl);\r\n\r\n    this.socket.onopen = () => {\r\n      this.retryCount = 0;\r\n      // Solicitar datos iniciales del bar (opcional según tu server)\r\n      this.emit('bar:request_initial', {});\r\n    };\r\n\r\n    this.socket.onmessage = (evt) => {\r\n      let payload;\r\n      try { payload = JSON.parse(evt.data); } catch { return; }\r\n      const { type } = payload || {};\r\n      if (type && this.handlers[type]) this.handlers[type](payload);\r\n      else if (this.handlers['*']) this.handlers['*'](payload);\r\n    };\r\n\r\n    this.socket.onclose = () => this.scheduleReconnect();\r\n    this.socket.onerror = (err) => console.error('⚠️ WS Bar error:', err);\r\n  }\r\n\r\n  scheduleReconnect() {\r\n    const delay = Math.min(1000 * 2 ** this.retryCount, 30000);\r\n    this.retryCount += 1;\r\n    setTimeout(() => this.connect(), delay);\r\n  }\r\n\r\n  on(type, cb) { this.handlers[type] = cb; }\r\n\r\n  async waitForOpen(retries = 8, delay = 400) {\r\n    for (let i = 0; i < retries; i++) {\r\n      if (this.socket?.readyState === WebSocket.OPEN) return;\r\n      await new Promise(r => setTimeout(r, delay));\r\n    }\r\n    throw new Error('WebSocket no disponible');\r\n  }\r\n\r\n  // ✅ FIX: emit correcto (antes había error en el spread del data)\r\n  emit(type, data = {}) {\r\n    const msg = JSON.stringify({ type, ...data });\r\n    if (this.socket?.readyState === WebSocket.OPEN) {\r\n      this.socket.send(msg);\r\n    } else {\r\n      this.waitForOpen()\r\n        .then(() => this.socket.send(msg))\r\n        .catch(e => console.error('No se pudo enviar por WS:', e));\r\n    }\r\n  }\r\n\r\n  // ===== REST (bar comparte /orders con cocina)\r\n  async createOrder(order) {\r\n    const res = await fetch(`${this.baseUrl}/orders`, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(order),\r\n    });\r\n    if (!res.ok) throw new Error('REST /orders falló');\r\n    return res.json();\r\n  }\r\n\r\n  async completeOrder(orderId) {\r\n    const res = await fetch(`${this.baseUrl}/orders/${orderId}`, {\r\n      method: 'PATCH',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ status: 'completed' }),\r\n    });\r\n    if (!res.ok) throw new Error('REST /orders/:id falló');\r\n    return res.json();\r\n  }\r\n\r\n  // Acciones de alto nivel\r\n  async placeOrder(order) {\r\n    const saved = await this.createOrder(order);      // Guarda REST\r\n    await this.waitForOpen();\r\n    this.emit('bar:new_order', { order: saved });     // Notifica WS (namespace bar)\r\n    return saved;\r\n  }\r\n\r\n  async markCompleted(orderId) {\r\n    const saved = await this.completeOrder(orderId);\r\n    await this.waitForOpen();\r\n    this.emit('bar:complete_order', { orderId });     // Notifica WS\r\n    return saved;\r\n  }\r\n}\r\n\r\nexport const barSocket = BarSocket.getInstance();\r\n\r\nexport const initBarSocket = (onOrdersUpdate) => {\r\n  // Escucha todo lo del namespace bar\r\n  barSocket.on('bar:initial_data', ({ orders }) => onOrdersUpdate?.(orders || []));\r\n  barSocket.on('bar:update',       ({ orders }) => onOrdersUpdate?.(orders || []));\r\n  // ✅ también si el server solo manda new_order\r\n  barSocket.on('bar:new_order',    ({ order })  => onOrdersUpdate?.(Array.isArray(order) ? order : [order]));\r\n  barSocket.on('*', (payload) => console.debug('WS payload', payload));\r\n  barSocket.connect();\r\n};\r\n\r\nexport const placeBarOrder = (order) => barSocket.placeOrder(order);\r\nexport const markBarOrderCompleted = (orderId) => barSocket.markCompleted(orderId);\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}