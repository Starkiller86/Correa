{"ast":null,"code":"// src/services/BarSocket.js\n// ✅ Socket aparte para BAR (alcohol) y señales de \"alcohol_updated\"\nclass BarSocket {\n  static getInstance() {\n    if (!BarSocket.instance) {\n      BarSocket.instance = new BarSocket();\n    }\n    return BarSocket.instance;\n  }\n  constructor() {\n    const host = window.location.hostname;\n    this.wsUrl = `ws://${host}:8080`;\n    this.baseUrl = `http://${host}:3001`;\n    this.socket = null;\n    this.retryCount = 0;\n    this.handlers = {\n      'bar:new_order': [],\n      'alcohol_updated': []\n    };\n  }\n  connect() {\n    if (this.socket && this.socket.readyState === WebSocket.OPEN) return;\n    this.socket = new WebSocket(this.wsUrl);\n    this.socket.onopen = () => {\n      console.log('🍹 [bar-socket] Conectado:', this.wsUrl);\n      this.retryCount = 0;\n    };\n    this.socket.onmessage = evt => {\n      var _data;\n      let data;\n      try {\n        data = JSON.parse(evt.data);\n      } catch {\n        return;\n      }\n      const t = (_data = data) === null || _data === void 0 ? void 0 : _data.type;\n      if (!t) return;\n      (this.handlers[t] || []).forEach(fn => {\n        try {\n          fn(data);\n        } catch (e) {\n          console.error(e);\n        }\n      });\n    };\n    this.socket.onclose = () => {\n      console.warn('🍹 [bar-socket] Desconectado, reintentando...');\n      this.scheduleReconnect();\n    };\n    this.socket.onerror = e => console.error('🍹 [bar-socket] Error:', e);\n  }\n  scheduleReconnect() {\n    const d = Math.min(1000 * 2 ** this.retryCount, 30000);\n    this.retryCount += 1;\n    setTimeout(() => this.connect(), d);\n  }\n  on(type, cb) {\n    if (!this.handlers[type]) this.handlers[type] = [];\n    this.handlers[type].push(cb);\n  }\n  send(obj) {\n    var _this$socket;\n    if (((_this$socket = this.socket) === null || _this$socket === void 0 ? void 0 : _this$socket.readyState) === WebSocket.OPEN) {\n      this.socket.send(JSON.stringify(obj));\n    } else {\n      console.error('🚫 [bar-socket] No conectado — no se envía', obj);\n    }\n  }\n\n  // --------- REST: catálogo alcohol ---------\n  async fetchAlcohol() {\n    const r = await fetch(`${this.baseUrl}/alcohol`);\n    return r.json();\n  }\n\n  // --------- Señales ---------\n  notifyAlcoholUpdated() {\n    this.send({\n      type: 'alcohol_updated'\n    });\n  }\n}\nBarSocket.instance = null;\nexport const barSocket = BarSocket.getInstance();\n\n// Inicializa WS bar + listener de eventos\nexport const initBarSocket = (onOrdersUpdate, onAlcoholUpdated) => {\n  // nuevos pedidos del bar (si algún cliente los emite namespaced)\n  barSocket.on('bar:new_order', d => {\n    const order = d.order ? [d.order] : [];\n    onOrdersUpdate === null || onOrdersUpdate === void 0 ? void 0 : onOrdersUpdate(order);\n  });\n\n  // cambios del catálogo de alcohol\n  barSocket.on('alcohol_updated', () => onAlcoholUpdated === null || onAlcoholUpdated === void 0 ? void 0 : onAlcoholUpdated());\n  barSocket.connect();\n};\n\n// Refrescar catálogo alcohol (GET)\nexport const fetchAlcoholItems = () => barSocket.fetchAlcohol();\n\n// Enviar pedido del bar (WS-only broadcast, sin tocar /orders)\nexport const placeBarOrder = async order => {\n  // Aquí solito emitimos por WS para que Bartender lo reciba\n  barSocket.send({\n    type: 'bar:new_order',\n    order\n  });\n  return order; // devolvemos lo mismo para añadirlo localmente\n};\n\n// Señal admin (AlcoholAdmin.jsx) tras CRUD\nexport const notifyAlcoholUpdated = () => barSocket.notifyAlcoholUpdated();","map":{"version":3,"names":["BarSocket","getInstance","instance","constructor","host","window","location","hostname","wsUrl","baseUrl","socket","retryCount","handlers","connect","readyState","WebSocket","OPEN","onopen","console","log","onmessage","evt","_data","data","JSON","parse","t","type","forEach","fn","e","error","onclose","warn","scheduleReconnect","onerror","d","Math","min","setTimeout","on","cb","push","send","obj","_this$socket","stringify","fetchAlcohol","r","fetch","json","notifyAlcoholUpdated","barSocket","initBarSocket","onOrdersUpdate","onAlcoholUpdated","order","fetchAlcoholItems","placeBarOrder"],"sources":["C:/Users/karen/OneDrive/Escritorio/Correa3/coorrea/Correa/client/src/services/BarSocket.js"],"sourcesContent":["// src/services/BarSocket.js\r\n// ✅ Socket aparte para BAR (alcohol) y señales de \"alcohol_updated\"\r\nclass BarSocket {\r\n  static instance = null;\r\n\r\n  static getInstance() {\r\n    if (!BarSocket.instance) {\r\n      BarSocket.instance = new BarSocket();\r\n    }\r\n    return BarSocket.instance;\r\n  }\r\n\r\n  constructor() {\r\n    const host = window.location.hostname;\r\n    this.wsUrl = `ws://${host}:8080`;\r\n    this.baseUrl = `http://${host}:3001`;\r\n    this.socket = null;\r\n    this.retryCount = 0;\r\n    this.handlers = {\r\n      'bar:new_order': [],\r\n      'alcohol_updated': [],\r\n    };\r\n  }\r\n\r\n  connect() {\r\n    if (this.socket && this.socket.readyState === WebSocket.OPEN) return;\r\n\r\n    this.socket = new WebSocket(this.wsUrl);\r\n\r\n    this.socket.onopen = () => {\r\n      console.log('🍹 [bar-socket] Conectado:', this.wsUrl);\r\n      this.retryCount = 0;\r\n    };\r\n\r\n    this.socket.onmessage = (evt) => {\r\n      let data;\r\n      try { data = JSON.parse(evt.data); } catch { return; }\r\n      const t = data?.type;\r\n      if (!t) return;\r\n\r\n      (this.handlers[t] || []).forEach(fn => {\r\n        try { fn(data); } catch (e) { console.error(e); }\r\n      });\r\n    };\r\n\r\n    this.socket.onclose = () => {\r\n      console.warn('🍹 [bar-socket] Desconectado, reintentando...');\r\n      this.scheduleReconnect();\r\n    };\r\n    this.socket.onerror = (e) => console.error('🍹 [bar-socket] Error:', e);\r\n  }\r\n\r\n  scheduleReconnect() {\r\n    const d = Math.min(1000 * (2 ** this.retryCount), 30000);\r\n    this.retryCount += 1;\r\n    setTimeout(() => this.connect(), d);\r\n  }\r\n\r\n  on(type, cb) {\r\n    if (!this.handlers[type]) this.handlers[type] = [];\r\n    this.handlers[type].push(cb);\r\n  }\r\n\r\n  send(obj) {\r\n    if (this.socket?.readyState === WebSocket.OPEN) {\r\n      this.socket.send(JSON.stringify(obj));\r\n    } else {\r\n      console.error('🚫 [bar-socket] No conectado — no se envía', obj);\r\n    }\r\n  }\r\n\r\n  // --------- REST: catálogo alcohol ---------\r\n  async fetchAlcohol() {\r\n    const r = await fetch(`${this.baseUrl}/alcohol`);\r\n    return r.json();\r\n  }\r\n\r\n  // --------- Señales ---------\r\n  notifyAlcoholUpdated() {\r\n    this.send({ type: 'alcohol_updated' });\r\n  }\r\n}\r\n\r\nexport const barSocket = BarSocket.getInstance();\r\n\r\n// Inicializa WS bar + listener de eventos\r\nexport const initBarSocket = (onOrdersUpdate, onAlcoholUpdated) => {\r\n  // nuevos pedidos del bar (si algún cliente los emite namespaced)\r\n  barSocket.on('bar:new_order', d => {\r\n    const order = d.order ? [d.order] : [];\r\n    onOrdersUpdate?.(order);\r\n  });\r\n\r\n  // cambios del catálogo de alcohol\r\n  barSocket.on('alcohol_updated', () => onAlcoholUpdated?.());\r\n\r\n  barSocket.connect();\r\n};\r\n\r\n// Refrescar catálogo alcohol (GET)\r\nexport const fetchAlcoholItems = () => barSocket.fetchAlcohol();\r\n\r\n// Enviar pedido del bar (WS-only broadcast, sin tocar /orders)\r\nexport const placeBarOrder = async (order) => {\r\n  // Aquí solito emitimos por WS para que Bartender lo reciba\r\n  barSocket.send({ type: 'bar:new_order', order });\r\n  return order; // devolvemos lo mismo para añadirlo localmente\r\n};\r\n\r\n// Señal admin (AlcoholAdmin.jsx) tras CRUD\r\nexport const notifyAlcoholUpdated = () => barSocket.notifyAlcoholUpdated();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}