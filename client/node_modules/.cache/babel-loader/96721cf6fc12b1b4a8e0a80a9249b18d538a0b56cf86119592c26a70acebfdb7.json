{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\beto_\\\\Downloads\\\\Correa\\\\client\\\\src\\\\pages\\\\Bartender.jsx\",\n  _s = $RefreshSig$();\n// src/pages/Bartender.jsx\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { initBarSocket } from '../services/BarSocket';\nimport jsPDF from 'jspdf';\nimport autoTable from 'jspdf-autotable';\nimport './bartender.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LEDGER_KEY = 'alcohol_sales_ledger_v1'; // Historial de ventas\nconst TOMBSTONES_KEY = 'bar_tombstones_v1'; // Firmas de pedidos eliminados\n\n/* ====================================================================\r\n   Helpers de firma y deduplicación\r\n   - orderSignature genera una firma estable del pedido (mesa + timestamp\r\n     truncado + items). Se usa para tombstones y para deduplicar.\r\n   - dedupOrders fusiona por id y por firma, y además ignora cualquier\r\n     pedido cuya firma esté marcada como tombstone.\r\n   ==================================================================== */\nconst orderSignature = o => {\n  var _o$table;\n  return JSON.stringify({\n    t: (_o$table = o.table) !== null && _o$table !== void 0 ? _o$table : o.mesa,\n    ts: (o.timestamp || '').slice(0, 19),\n    // precisión a segundos\n    items: (o.items || o.pedidos || []).map(it => ({\n      n: it === null || it === void 0 ? void 0 : it.name,\n      s: (it === null || it === void 0 ? void 0 : it.size) || '',\n      q: (it === null || it === void 0 ? void 0 : it.quantity) || 1,\n      c: ((it === null || it === void 0 ? void 0 : it.category) || '').toLowerCase(),\n      p: Number(it === null || it === void 0 ? void 0 : it.price) || 0\n    }))\n  });\n};\nconst dedupOrders = (arr = [], tombstones = new Set()) => {\n  const byId = new Map();\n  const signatures = new Map(); // sig -> id (para fusionar estado \"completed\")\n\n  for (const raw of arr) {\n    if (!raw) continue;\n    if (((raw === null || raw === void 0 ? void 0 : raw.source) || 'bar') !== 'bar') continue;\n    const o = {\n      ...raw,\n      completed: !!raw.completed\n    };\n    const sig = orderSignature(o);\n\n    // Si la firma está en tombstones, lo ignoramos siempre\n    if (tombstones.has(sig)) continue;\n\n    // Si ya existe esa firma, solo fusionamos el estado \"completed\"\n    if (signatures.has(sig)) {\n      const existingId = signatures.get(sig);\n      const existing = byId.get(existingId);\n      if (existing) existing.completed = existing.completed || o.completed;\n      continue;\n    }\n\n    // Si ya existe por id, fusionamos campos preservando \"completed\"\n    if (byId.has(o.id)) {\n      const prev = byId.get(o.id);\n      byId.set(o.id, {\n        ...prev,\n        ...o,\n        completed: prev.completed || o.completed\n      });\n    } else {\n      byId.set(o.id, o);\n    }\n\n    // Registrar firma\n    if (!signatures.has(sig)) signatures.set(sig, o.id);\n  }\n  return [...byId.values()];\n};\n\n/* ====================================================================\r\n   Ledger (histórico persistente) y Tombstones\r\n   ==================================================================== */\nfunction loadLedger() {\n  try {\n    const raw = localStorage.getItem(LEDGER_KEY);\n    if (!raw) {\n      return {\n        processedOrderIds: {},\n        totals: {\n          simples: 0,\n          dobles: 0,\n          triples: 0,\n          botellas: 0,\n          amount: 0\n        },\n        entries: [] // líneas históricas para el PDF\n      };\n    }\n    const parsed = JSON.parse(raw);\n    return {\n      processedOrderIds: parsed.processedOrderIds || {},\n      totals: parsed.totals || {\n        simples: 0,\n        dobles: 0,\n        triples: 0,\n        botellas: 0,\n        amount: 0\n      },\n      entries: Array.isArray(parsed.entries) ? parsed.entries : []\n    };\n  } catch {\n    return {\n      processedOrderIds: {},\n      totals: {\n        simples: 0,\n        dobles: 0,\n        triples: 0,\n        botellas: 0,\n        amount: 0\n      },\n      entries: []\n    };\n  }\n}\nfunction saveLedger(ledger) {\n  localStorage.setItem(LEDGER_KEY, JSON.stringify(ledger));\n}\nconst loadTombstones = () => {\n  try {\n    return new Set(JSON.parse(localStorage.getItem(TOMBSTONES_KEY) || '[]'));\n  } catch {\n    return new Set();\n  }\n};\nconst saveTombstones = set => {\n  localStorage.setItem(TOMBSTONES_KEY, JSON.stringify([...set]));\n};\n\n/* ====================================================================\r\n   Helpers para PDF y presentación\r\n   ==================================================================== */\nconst money = n => (Number(n) || 0).toFixed(2);\nconst fecha = iso => {\n  const d = new Date(iso);\n  return isNaN(d) ? '' : d.toLocaleDateString();\n};\nconst hora = iso => {\n  const d = new Date(iso);\n  return isNaN(d) ? '' : d.toLocaleTimeString([], {\n    hour: '2-digit',\n    minute: '2-digit'\n  });\n};\nconst tipoHumano = e => {\n  if ((e.category || '').toLowerCase() === 'botellas') return `Botella x${Number(e.quantity || 1)}`;\n  const s = String(e.size || 'simple').toLowerCase();\n  if (s === 'doble') return 'Doble';\n  if (s === 'triple') return 'Triple';\n  return 'Simple';\n};\n\n/* ====================================================================\r\n   Componente principal\r\n   ==================================================================== */\nconst Bartender = () => {\n  _s();\n  const [orders, setOrders] = useState([]);\n  const [ledger, setLedger] = useState(loadLedger());\n  const [tombstones, setTombstones] = useState(loadTombstones());\n  const [showStats, setShowStats] = useState(false);\n\n  /* ------------------------------------------------------------\r\n     Carga inicial desde localStorage (solo pedidos del bar),\r\n     aplica deduplicación y respeta tombstones.\r\n     ------------------------------------------------------------ */\n  useEffect(() => {\n    const saved = localStorage.getItem('alcohol_orders');\n    if (saved) {\n      try {\n        const parsed = JSON.parse(saved).filter(o => ((o === null || o === void 0 ? void 0 : o.source) || 'bar') === 'bar');\n        const clean = dedupOrders(parsed, tombstones);\n        localStorage.setItem('alcohol_orders', JSON.stringify(clean));\n        setOrders(clean);\n        foldOrdersIntoLedger(clean);\n      } catch {}\n    }\n    // no añadir tombstones como dependencia aquí para no re-plegar varias veces\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  /* ------------------------------------------------------------\r\n     WebSocket del bar. Mezcla de manera idempotente y respetando\r\n     tombstones para evitar resurrecciones.\r\n     ------------------------------------------------------------ */\n  useEffect(() => {\n    const mergeUnique = incoming => {\n      const onlyBar = (incoming || []).filter(o => ((o === null || o === void 0 ? void 0 : o.source) || 'bar') === 'bar');\n      if (!onlyBar.length) return;\n      setOrders(prev => {\n        const next = dedupOrders([...prev, ...onlyBar], tombstones);\n        localStorage.setItem('alcohol_orders', JSON.stringify(next));\n        return next;\n      });\n\n      // Solo plegamos lo nuevo al ledger. Aunque lleguen duplicados,\n      // processedOrderIds impide contarlos dos veces.\n      foldOrdersIntoLedger(onlyBar);\n    };\n    initBarSocket(mergeUnique);\n  }, [tombstones]);\n\n  /* ------------------------------------------------------------\r\n     Sincronización entre pestañas:\r\n     - alcohol_orders: rehidratar lista respetando tombstones\r\n     - TOMBSTONES_KEY: actualizar el set local\r\n     ------------------------------------------------------------ */\n  useEffect(() => {\n    const onStorage = e => {\n      if (e.key === TOMBSTONES_KEY && typeof e.newValue === 'string') {\n        try {\n          setTombstones(new Set(JSON.parse(e.newValue)));\n        } catch {}\n      }\n      if (e.key === 'alcohol_orders' && typeof e.newValue === 'string') {\n        try {\n          const parsed = JSON.parse(e.newValue).filter(o => ((o === null || o === void 0 ? void 0 : o.source) || 'bar') === 'bar');\n          const clean = dedupOrders(parsed, tombstones);\n          setOrders(clean);\n          foldOrdersIntoLedger(clean);\n        } catch {}\n      }\n    };\n    window.addEventListener('storage', onStorage);\n    return () => window.removeEventListener('storage', onStorage);\n  }, [tombstones]);\n\n  /* ------------------------------------------------------------\r\n     Plegado de pedidos al ledger histórico. Guarda:\r\n     - totales agregados (simples/dobles/triples/botellas/amount)\r\n     - entries por ítem para el PDF\r\n     ------------------------------------------------------------ */\n  const foldOrdersIntoLedger = ordersArr => {\n    if (!Array.isArray(ordersArr) || ordersArr.length === 0) return;\n    setLedger(prev => {\n      const next = {\n        processedOrderIds: {\n          ...prev.processedOrderIds\n        },\n        totals: {\n          ...prev.totals\n        },\n        entries: [...prev.entries]\n      };\n      let changed = false;\n      for (const order of ordersArr) {\n        var _ref, _order$items;\n        if (!(order !== null && order !== void 0 && order.id) || ((order === null || order === void 0 ? void 0 : order.source) || 'bar') !== 'bar' || next.processedOrderIds[order.id]) continue;\n        const items = (_ref = (_order$items = order.items) !== null && _order$items !== void 0 ? _order$items : order.pedidos) !== null && _ref !== void 0 ? _ref : [];\n        for (const it of items) {\n          const size = (it.size || 'simple').toLowerCase();\n          const category = (it.category || '').toLowerCase();\n          const price = Number(it.price) || 0;\n\n          // Totales\n          if (category === 'botellas') next.totals.botellas += Number(it.quantity) || 1;else if (size === 'doble') next.totals.dobles += 1;else if (size === 'triple') next.totals.triples += 1;else next.totals.simples += 1;\n          next.totals.amount += price;\n\n          // Entrada histórica para el PDF\n          next.entries.push({\n            name: it.name || '',\n            price,\n            timestamp: order.timestamp,\n            size: it.size || 'simple',\n            category: it.category || '',\n            quantity: it.quantity || 1\n          });\n          changed = true;\n        }\n        next.processedOrderIds[order.id] = true;\n      }\n      if (changed) saveLedger(next);\n      return changed ? next : prev;\n    });\n  };\n\n  /* ------------------------------------------------------------\r\n     Estadísticas en vivo (pedidos abiertos en memoria)\r\n     ------------------------------------------------------------ */\n  const statsLive = useMemo(() => {\n    let total = 0,\n      simples = 0,\n      dobles = 0,\n      triples = 0,\n      botellas = 0;\n    for (const order of orders) {\n      var _ref2, _order$items2;\n      const items = (_ref2 = (_order$items2 = order.items) !== null && _order$items2 !== void 0 ? _order$items2 : order.pedidos) !== null && _ref2 !== void 0 ? _ref2 : [];\n      for (const it of items) {\n        const size = (it.size || 'simple').toLowerCase();\n        const category = (it.category || '').toLowerCase();\n        const price = Number(it.price) || 0;\n        if (category === 'botellas') botellas += Number(it.quantity) || 1;else if (size === 'doble') dobles++;else if (size === 'triple') triples++;else simples++;\n        total += price;\n      }\n    }\n    return {\n      total,\n      simples,\n      dobles,\n      triples,\n      botellas\n    };\n  }, [orders]);\n  const statsLedger = ledger.totals;\n\n  /* ------------------------------------------------------------\r\n     Acciones UI\r\n     ------------------------------------------------------------ */\n  const resetLedger = () => {\n    const empty = {\n      processedOrderIds: {},\n      totals: {\n        simples: 0,\n        dobles: 0,\n        triples: 0,\n        botellas: 0,\n        amount: 0\n      },\n      entries: []\n    };\n    setLedger(empty);\n    saveLedger(empty);\n  };\n  const markAsCompleted = orderId => {\n    setOrders(prev => {\n      const updated = prev.map(o => o.id === orderId ? {\n        ...o,\n        completed: true\n      } : o);\n      localStorage.setItem('alcohol_orders', JSON.stringify(updated));\n      return updated;\n    });\n  };\n\n  // Al eliminar completados:\n  // 1) registramos la firma de cada pedido como tombstone\n  // 2) guardamos el set en localStorage (se replica a otras pestañas)\n  // 3) filtramos de la lista y de localStorage para esta pestaña\n  const clearCompletedOrders = () => {\n    setOrders(prev => {\n      const toRemove = prev.filter(o => o.completed);\n      if (toRemove.length) {\n        const newTombs = new Set(tombstones);\n        for (const o of toRemove) newTombs.add(orderSignature(o));\n        setTombstones(newTombs);\n        saveTombstones(newTombs);\n      }\n      const updated = prev.filter(o => !o.completed);\n      localStorage.setItem('alcohol_orders', JSON.stringify(updated));\n      return updated;\n    });\n  };\n\n  /* ------------------------------------------------------------\r\n     PDF: tabla con Ítem, Precio, Fecha, Hora, Tipo y TOTAL\r\n     ------------------------------------------------------------ */\n  const downloadPDF = () => {\n    const doc = new jsPDF('p', 'pt');\n    const ahora = new Date();\n    const fechaDescarga = ahora.toLocaleString();\n\n    // Encabezado\n    doc.setFontSize(16);\n    doc.text('Historial de Ventas - Bar', 40, 40);\n    doc.setFontSize(10);\n    doc.text(`Generado: ${fechaDescarga}`, 40, 58);\n\n    // Ordenamos por fecha para una lectura natural\n    const entries = Array.isArray(ledger.entries) ? ledger.entries : [];\n    const sorted = [...entries].sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));\n    const rows = sorted.map(e => [e.name, `$ ${money(e.price)}`, fecha(e.timestamp), hora(e.timestamp), tipoHumano(e)]);\n    const total = sorted.reduce((acc, e) => acc + (Number(e.price) || 0), 0);\n    autoTable(doc, {\n      startY: 80,\n      head: [['Ítem', 'Precio', 'Fecha', 'Hora', 'Tipo']],\n      body: rows,\n      styles: {\n        fontSize: 10,\n        cellPadding: 6\n      },\n      headStyles: {\n        fillColor: [60, 80, 255]\n      },\n      columnStyles: {\n        0: {\n          cellWidth: 220\n        },\n        1: {\n          halign: 'right',\n          cellWidth: 80\n        },\n        2: {\n          cellWidth: 90\n        },\n        3: {\n          cellWidth: 70\n        },\n        4: {\n          cellWidth: 90\n        }\n      },\n      foot: [[{\n        content: 'TOTAL',\n        colSpan: 1\n      }, {\n        content: `$ ${money(total)}`,\n        styles: {\n          halign: 'right'\n        }\n      }, {\n        content: '',\n        colSpan: 3\n      }]],\n      footStyles: {\n        fillColor: [240, 240, 240],\n        textColor: [0, 0, 0],\n        fontStyle: 'bold'\n      },\n      didParseCell: data => {\n        if (data.section === 'foot' && data.column.index > 1) data.cell.text = [''];\n      }\n    });\n    doc.save(`ventas_bar_${ahora.toISOString().slice(0, 10)}.pdf`);\n  };\n\n  /* ------------------------------------------------------------\r\n     Render\r\n     ------------------------------------------------------------ */\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bartender-interface\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Pedidos del Bar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pedidos-grid\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"columna\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Pedidos Pendientes (\", orders.filter(o => !o.completed).length, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 385,\n          columnNumber: 11\n        }, this), orders.filter(o => !o.completed).map((order, idx) => {\n          var _order$table, _order$time, _order$items3;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"pedido-card pendiente\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"pedido-header\",\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: [\"Mesa \", (_order$table = order.table) !== null && _order$table !== void 0 ? _order$table : order.mesa]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 391,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: (_order$time = order.time) !== null && _order$time !== void 0 ? _order$time : new Date(order.timestamp).toLocaleTimeString()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 392,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 390,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"pedido-items\",\n              children: (_order$items3 = order.items) === null || _order$items3 === void 0 ? void 0 : _order$items3.map((item, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [item.name, \" \", item.size ? `(${item.size})` : '', item.category === 'botellas' ? ` x${item.quantity || 1}` : '']\n              }, `${order.id}-item-${i}`, true, {\n                fileName: _jsxFileName,\n                lineNumber: 396,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 394,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn-completar\",\n              onClick: () => markAsCompleted(order.id),\n              children: \"Marcar como Completado\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 402,\n              columnNumber: 17\n            }, this)]\n          }, `${order.id}-pend-${idx}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 389,\n            columnNumber: 15\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"columna\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Pedidos Completados (\", orders.filter(o => o.completed).length, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 411,\n          columnNumber: 11\n        }, this), orders.filter(o => o.completed).map((order, idx) => {\n          var _order$table2, _order$time2, _order$items4;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"pedido-card completado\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"pedido-header\",\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: [\"Mesa \", (_order$table2 = order.table) !== null && _order$table2 !== void 0 ? _order$table2 : order.mesa]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 417,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: (_order$time2 = order.time) !== null && _order$time2 !== void 0 ? _order$time2 : new Date(order.timestamp).toLocaleTimeString()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 418,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 416,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"pedido-items\",\n              children: (_order$items4 = order.items) === null || _order$items4 === void 0 ? void 0 : _order$items4.map((item, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [item.name, \" \", item.size ? `(${item.size})` : '', item.category === 'botellas' ? ` x${item.quantity || 1}` : '']\n              }, `${order.id}-compitem-${i}`, true, {\n                fileName: _jsxFileName,\n                lineNumber: 422,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 420,\n              columnNumber: 17\n            }, this)]\n          }, `${order.id}-comp-${idx}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 415,\n            columnNumber: 15\n          }, this);\n        }), orders.some(o => o.completed) && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn-eliminar\",\n          onClick: clearCompletedOrders,\n          children: \"Eliminar todas las completadas\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 431,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 382,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setShowStats(s => !s),\n      children: showStats ? 'Ocultar resumen de ventas' : 'Mostrar resumen de ventas'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 438,\n      columnNumber: 7\n    }, this), showStats && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"stats\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Resumen de Ventas (Hist\\xF3rico)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 444,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Simples: \", statsLedger.simples]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 445,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Dobles: \", statsLedger.dobles]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 446,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Triples: \", statsLedger.triples]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 447,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Botellas: \", statsLedger.botellas]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 448,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [\"Total: $\", statsLedger.amount.toFixed(2)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 449,\n          columnNumber: 14\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 449,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          marginTop: 12\n        },\n        onClick: downloadPDF,\n        children: \"Descargar historial en PDF\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 451,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"details\", {\n        style: {\n          marginTop: 12\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"summary\", {\n          children: \"Comparar con ventas abiertas (en vivo)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 456,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Simples (vivo): \", statsLive.simples]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 457,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Dobles (vivo): \", statsLive.dobles]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 458,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Triples (vivo): \", statsLive.triples]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 459,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Botellas (vivo): \", statsLive.botellas]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 460,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: [\"Total (vivo): $\", statsLive.total.toFixed(2)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 461,\n            columnNumber: 16\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 461,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 455,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"remove-button\",\n        style: {\n          marginTop: 12\n        },\n        onClick: resetLedger,\n        children: \"Reiniciar resumen hist\\xF3rico\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 464,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 443,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 379,\n    columnNumber: 5\n  }, this);\n};\n_s(Bartender, \"uFqtELVWUMKDiAnFlGAadVUOULk=\");\n_c = Bartender;\nexport default Bartender;\nvar _c;\n$RefreshReg$(_c, \"Bartender\");","map":{"version":3,"names":["React","useEffect","useMemo","useState","initBarSocket","jsPDF","autoTable","jsxDEV","_jsxDEV","LEDGER_KEY","TOMBSTONES_KEY","orderSignature","o","_o$table","JSON","stringify","t","table","mesa","ts","timestamp","slice","items","pedidos","map","it","n","name","s","size","q","quantity","c","category","toLowerCase","p","Number","price","dedupOrders","arr","tombstones","Set","byId","Map","signatures","raw","source","completed","sig","has","existingId","get","existing","id","prev","set","values","loadLedger","localStorage","getItem","processedOrderIds","totals","simples","dobles","triples","botellas","amount","entries","parsed","parse","Array","isArray","saveLedger","ledger","setItem","loadTombstones","saveTombstones","money","toFixed","fecha","iso","d","Date","isNaN","toLocaleDateString","hora","toLocaleTimeString","hour","minute","tipoHumano","e","String","Bartender","_s","orders","setOrders","setLedger","setTombstones","showStats","setShowStats","saved","filter","clean","foldOrdersIntoLedger","mergeUnique","incoming","onlyBar","length","next","onStorage","key","newValue","window","addEventListener","removeEventListener","ordersArr","changed","order","_ref","_order$items","push","statsLive","total","_ref2","_order$items2","statsLedger","resetLedger","empty","markAsCompleted","orderId","updated","clearCompletedOrders","toRemove","newTombs","add","downloadPDF","doc","ahora","fechaDescarga","toLocaleString","setFontSize","text","sorted","sort","a","b","rows","reduce","acc","startY","head","body","styles","fontSize","cellPadding","headStyles","fillColor","columnStyles","cellWidth","halign","foot","content","colSpan","footStyles","textColor","fontStyle","didParseCell","data","section","column","index","cell","save","toISOString","className","children","fileName","_jsxFileName","lineNumber","columnNumber","idx","_order$table","_order$time","_order$items3","time","item","i","onClick","_order$table2","_order$time2","_order$items4","some","style","marginTop","_c","$RefreshReg$"],"sources":["C:/Users/beto_/Downloads/Correa/client/src/pages/Bartender.jsx"],"sourcesContent":["// src/pages/Bartender.jsx\r\nimport React, { useEffect, useMemo, useState } from 'react';\r\nimport { initBarSocket } from '../services/BarSocket';\r\nimport jsPDF from 'jspdf';\r\nimport autoTable from 'jspdf-autotable';\r\nimport './bartender.css';\r\n\r\nconst LEDGER_KEY = 'alcohol_sales_ledger_v1';   // Historial de ventas\r\nconst TOMBSTONES_KEY = 'bar_tombstones_v1';     // Firmas de pedidos eliminados\r\n\r\n/* ====================================================================\r\n   Helpers de firma y deduplicación\r\n   - orderSignature genera una firma estable del pedido (mesa + timestamp\r\n     truncado + items). Se usa para tombstones y para deduplicar.\r\n   - dedupOrders fusiona por id y por firma, y además ignora cualquier\r\n     pedido cuya firma esté marcada como tombstone.\r\n   ==================================================================== */\r\nconst orderSignature = (o) =>\r\n  JSON.stringify({\r\n    t: o.table ?? o.mesa,\r\n    ts: (o.timestamp || '').slice(0, 19), // precisión a segundos\r\n    items: (o.items || o.pedidos || []).map((it) => ({\r\n      n: it?.name,\r\n      s: it?.size || '',\r\n      q: it?.quantity || 1,\r\n      c: (it?.category || '').toLowerCase(),\r\n      p: Number(it?.price) || 0,\r\n    })),\r\n  });\r\n\r\nconst dedupOrders = (arr = [], tombstones = new Set()) => {\r\n  const byId = new Map();\r\n  const signatures = new Map(); // sig -> id (para fusionar estado \"completed\")\r\n\r\n  for (const raw of arr) {\r\n    if (!raw) continue;\r\n    if ((raw?.source || 'bar') !== 'bar') continue;\r\n\r\n    const o = { ...raw, completed: !!raw.completed };\r\n    const sig = orderSignature(o);\r\n\r\n    // Si la firma está en tombstones, lo ignoramos siempre\r\n    if (tombstones.has(sig)) continue;\r\n\r\n    // Si ya existe esa firma, solo fusionamos el estado \"completed\"\r\n    if (signatures.has(sig)) {\r\n      const existingId = signatures.get(sig);\r\n      const existing = byId.get(existingId);\r\n      if (existing) existing.completed = existing.completed || o.completed;\r\n      continue;\r\n    }\r\n\r\n    // Si ya existe por id, fusionamos campos preservando \"completed\"\r\n    if (byId.has(o.id)) {\r\n      const prev = byId.get(o.id);\r\n      byId.set(o.id, { ...prev, ...o, completed: prev.completed || o.completed });\r\n    } else {\r\n      byId.set(o.id, o);\r\n    }\r\n\r\n    // Registrar firma\r\n    if (!signatures.has(sig)) signatures.set(sig, o.id);\r\n  }\r\n\r\n  return [...byId.values()];\r\n};\r\n\r\n/* ====================================================================\r\n   Ledger (histórico persistente) y Tombstones\r\n   ==================================================================== */\r\nfunction loadLedger() {\r\n  try {\r\n    const raw = localStorage.getItem(LEDGER_KEY);\r\n    if (!raw) {\r\n      return {\r\n        processedOrderIds: {},\r\n        totals: { simples: 0, dobles: 0, triples: 0, botellas: 0, amount: 0 },\r\n        entries: [], // líneas históricas para el PDF\r\n      };\r\n    }\r\n    const parsed = JSON.parse(raw);\r\n    return {\r\n      processedOrderIds: parsed.processedOrderIds || {},\r\n      totals:\r\n        parsed.totals || { simples: 0, dobles: 0, triples: 0, botellas: 0, amount: 0 },\r\n      entries: Array.isArray(parsed.entries) ? parsed.entries : [],\r\n    };\r\n  } catch {\r\n    return {\r\n      processedOrderIds: {},\r\n      totals: { simples: 0, dobles: 0, triples: 0, botellas: 0, amount: 0 },\r\n      entries: [],\r\n    };\r\n  }\r\n}\r\nfunction saveLedger(ledger) {\r\n  localStorage.setItem(LEDGER_KEY, JSON.stringify(ledger));\r\n}\r\n\r\nconst loadTombstones = () => {\r\n  try { return new Set(JSON.parse(localStorage.getItem(TOMBSTONES_KEY) || '[]')); }\r\n  catch { return new Set(); }\r\n};\r\nconst saveTombstones = (set) => {\r\n  localStorage.setItem(TOMBSTONES_KEY, JSON.stringify([...set]));\r\n};\r\n\r\n/* ====================================================================\r\n   Helpers para PDF y presentación\r\n   ==================================================================== */\r\nconst money = (n) => (Number(n) || 0).toFixed(2);\r\nconst fecha = (iso) => {\r\n  const d = new Date(iso);\r\n  return isNaN(d) ? '' : d.toLocaleDateString();\r\n};\r\nconst hora = (iso) => {\r\n  const d = new Date(iso);\r\n  return isNaN(d) ? '' : d.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n};\r\nconst tipoHumano = (e) => {\r\n  if ((e.category || '').toLowerCase() === 'botellas') return `Botella x${Number(e.quantity || 1)}`;\r\n  const s = String(e.size || 'simple').toLowerCase();\r\n  if (s === 'doble') return 'Doble';\r\n  if (s === 'triple') return 'Triple';\r\n  return 'Simple';\r\n};\r\n\r\n/* ====================================================================\r\n   Componente principal\r\n   ==================================================================== */\r\nconst Bartender = () => {\r\n  const [orders, setOrders] = useState([]);\r\n  const [ledger, setLedger] = useState(loadLedger());\r\n  const [tombstones, setTombstones] = useState(loadTombstones());\r\n  const [showStats, setShowStats] = useState(false);\r\n\r\n  /* ------------------------------------------------------------\r\n     Carga inicial desde localStorage (solo pedidos del bar),\r\n     aplica deduplicación y respeta tombstones.\r\n     ------------------------------------------------------------ */\r\n  useEffect(() => {\r\n    const saved = localStorage.getItem('alcohol_orders');\r\n    if (saved) {\r\n      try {\r\n        const parsed = JSON.parse(saved).filter((o) => (o?.source || 'bar') === 'bar');\r\n        const clean = dedupOrders(parsed, tombstones);\r\n        localStorage.setItem('alcohol_orders', JSON.stringify(clean));\r\n        setOrders(clean);\r\n        foldOrdersIntoLedger(clean);\r\n      } catch {}\r\n    }\r\n    // no añadir tombstones como dependencia aquí para no re-plegar varias veces\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  /* ------------------------------------------------------------\r\n     WebSocket del bar. Mezcla de manera idempotente y respetando\r\n     tombstones para evitar resurrecciones.\r\n     ------------------------------------------------------------ */\r\n  useEffect(() => {\r\n    const mergeUnique = (incoming) => {\r\n      const onlyBar = (incoming || []).filter((o) => (o?.source || 'bar') === 'bar');\r\n      if (!onlyBar.length) return;\r\n\r\n      setOrders((prev) => {\r\n        const next = dedupOrders([...prev, ...onlyBar], tombstones);\r\n        localStorage.setItem('alcohol_orders', JSON.stringify(next));\r\n        return next;\r\n      });\r\n\r\n      // Solo plegamos lo nuevo al ledger. Aunque lleguen duplicados,\r\n      // processedOrderIds impide contarlos dos veces.\r\n      foldOrdersIntoLedger(onlyBar);\r\n    };\r\n    initBarSocket(mergeUnique);\r\n  }, [tombstones]);\r\n\r\n  /* ------------------------------------------------------------\r\n     Sincronización entre pestañas:\r\n     - alcohol_orders: rehidratar lista respetando tombstones\r\n     - TOMBSTONES_KEY: actualizar el set local\r\n     ------------------------------------------------------------ */\r\n  useEffect(() => {\r\n    const onStorage = (e) => {\r\n      if (e.key === TOMBSTONES_KEY && typeof e.newValue === 'string') {\r\n        try { setTombstones(new Set(JSON.parse(e.newValue))); } catch {}\r\n      }\r\n      if (e.key === 'alcohol_orders' && typeof e.newValue === 'string') {\r\n        try {\r\n          const parsed = JSON.parse(e.newValue).filter((o) => (o?.source || 'bar') === 'bar');\r\n          const clean = dedupOrders(parsed, tombstones);\r\n          setOrders(clean);\r\n          foldOrdersIntoLedger(clean);\r\n        } catch {}\r\n      }\r\n    };\r\n    window.addEventListener('storage', onStorage);\r\n    return () => window.removeEventListener('storage', onStorage);\r\n  }, [tombstones]);\r\n\r\n  /* ------------------------------------------------------------\r\n     Plegado de pedidos al ledger histórico. Guarda:\r\n     - totales agregados (simples/dobles/triples/botellas/amount)\r\n     - entries por ítem para el PDF\r\n     ------------------------------------------------------------ */\r\n  const foldOrdersIntoLedger = (ordersArr) => {\r\n    if (!Array.isArray(ordersArr) || ordersArr.length === 0) return;\r\n\r\n    setLedger((prev) => {\r\n      const next = {\r\n        processedOrderIds: { ...prev.processedOrderIds },\r\n        totals: { ...prev.totals },\r\n        entries: [...prev.entries],\r\n      };\r\n\r\n      let changed = false;\r\n\r\n      for (const order of ordersArr) {\r\n        if (\r\n          !order?.id ||\r\n          (order?.source || 'bar') !== 'bar' ||\r\n          next.processedOrderIds[order.id]\r\n        ) continue;\r\n\r\n        const items = order.items ?? order.pedidos ?? [];\r\n        for (const it of items) {\r\n          const size = (it.size || 'simple').toLowerCase();\r\n          const category = (it.category || '').toLowerCase();\r\n          const price = Number(it.price) || 0;\r\n\r\n          // Totales\r\n          if (category === 'botellas') next.totals.botellas += Number(it.quantity) || 1;\r\n          else if (size === 'doble') next.totals.dobles += 1;\r\n          else if (size === 'triple') next.totals.triples += 1;\r\n          else next.totals.simples += 1;\r\n          next.totals.amount += price;\r\n\r\n          // Entrada histórica para el PDF\r\n          next.entries.push({\r\n            name: it.name || '',\r\n            price,\r\n            timestamp: order.timestamp,\r\n            size: it.size || 'simple',\r\n            category: it.category || '',\r\n            quantity: it.quantity || 1,\r\n          });\r\n          changed = true;\r\n        }\r\n\r\n        next.processedOrderIds[order.id] = true;\r\n      }\r\n\r\n      if (changed) saveLedger(next);\r\n      return changed ? next : prev;\r\n    });\r\n  };\r\n\r\n  /* ------------------------------------------------------------\r\n     Estadísticas en vivo (pedidos abiertos en memoria)\r\n     ------------------------------------------------------------ */\r\n  const statsLive = useMemo(() => {\r\n    let total = 0, simples = 0, dobles = 0, triples = 0, botellas = 0;\r\n    for (const order of orders) {\r\n      const items = order.items ?? order.pedidos ?? [];\r\n      for (const it of items) {\r\n        const size = (it.size || 'simple').toLowerCase();\r\n        const category = (it.category || '').toLowerCase();\r\n        const price = Number(it.price) || 0;\r\n        if (category === 'botellas') botellas += Number(it.quantity) || 1;\r\n        else if (size === 'doble')   dobles++;\r\n        else if (size === 'triple')  triples++;\r\n        else                         simples++;\r\n        total += price;\r\n      }\r\n    }\r\n    return { total, simples, dobles, triples, botellas };\r\n  }, [orders]);\r\n\r\n  const statsLedger = ledger.totals;\r\n\r\n  /* ------------------------------------------------------------\r\n     Acciones UI\r\n     ------------------------------------------------------------ */\r\n  const resetLedger = () => {\r\n    const empty = {\r\n      processedOrderIds: {},\r\n      totals: { simples: 0, dobles: 0, triples: 0, botellas: 0, amount: 0 },\r\n      entries: [],\r\n    };\r\n    setLedger(empty);\r\n    saveLedger(empty);\r\n  };\r\n\r\n  const markAsCompleted = (orderId) => {\r\n    setOrders((prev) => {\r\n      const updated = prev.map((o) => (o.id === orderId ? { ...o, completed: true } : o));\r\n      localStorage.setItem('alcohol_orders', JSON.stringify(updated));\r\n      return updated;\r\n    });\r\n  };\r\n\r\n  // Al eliminar completados:\r\n  // 1) registramos la firma de cada pedido como tombstone\r\n  // 2) guardamos el set en localStorage (se replica a otras pestañas)\r\n  // 3) filtramos de la lista y de localStorage para esta pestaña\r\n  const clearCompletedOrders = () => {\r\n    setOrders((prev) => {\r\n      const toRemove = prev.filter((o) => o.completed);\r\n      if (toRemove.length) {\r\n        const newTombs = new Set(tombstones);\r\n        for (const o of toRemove) newTombs.add(orderSignature(o));\r\n        setTombstones(newTombs);\r\n        saveTombstones(newTombs);\r\n      }\r\n      const updated = prev.filter((o) => !o.completed);\r\n      localStorage.setItem('alcohol_orders', JSON.stringify(updated));\r\n      return updated;\r\n    });\r\n  };\r\n\r\n  /* ------------------------------------------------------------\r\n     PDF: tabla con Ítem, Precio, Fecha, Hora, Tipo y TOTAL\r\n     ------------------------------------------------------------ */\r\n  const downloadPDF = () => {\r\n    const doc = new jsPDF('p', 'pt');\r\n    const ahora = new Date();\r\n    const fechaDescarga = ahora.toLocaleString();\r\n\r\n    // Encabezado\r\n    doc.setFontSize(16);\r\n    doc.text('Historial de Ventas - Bar', 40, 40);\r\n    doc.setFontSize(10);\r\n    doc.text(`Generado: ${fechaDescarga}`, 40, 58);\r\n\r\n    // Ordenamos por fecha para una lectura natural\r\n    const entries = Array.isArray(ledger.entries) ? ledger.entries : [];\r\n    const sorted = [...entries].sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));\r\n\r\n    const rows = sorted.map((e) => [\r\n      e.name,\r\n      `$ ${money(e.price)}`,\r\n      fecha(e.timestamp),\r\n      hora(e.timestamp),\r\n      tipoHumano(e),\r\n    ]);\r\n\r\n    const total = sorted.reduce((acc, e) => acc + (Number(e.price) || 0), 0);\r\n autoTable(doc, {\r\n   startY: 80,\r\n   head: [['Ítem', 'Precio', 'Fecha', 'Hora', 'Tipo']],\r\n   body: rows,\r\n   styles: { fontSize: 10, cellPadding: 6 },\r\n   headStyles: { fillColor: [60, 80, 255] },\r\n   columnStyles: {\r\n     0: { cellWidth: 220 },\r\n     1: { halign: 'right', cellWidth: 80 },\r\n     2: { cellWidth: 90 },\r\n     3: { cellWidth: 70 },\r\n     4: { cellWidth: 90 },\r\n   },\r\n   foot: [[\r\n     { content: 'TOTAL', colSpan: 1 },\r\n     { content: `$ ${money(total)}`, styles: { halign: 'right' } },\r\n     { content: '', colSpan: 3 }\r\n   ]],\r\n   footStyles: { fillColor: [240, 240, 240], textColor: [0, 0, 0], fontStyle: 'bold' },\r\n   didParseCell: (data) => {\r\n  if (data.section === 'foot' && data.column.index > 1) data.cell.text = [''];\r\n },\r\n });\r\n\r\n    doc.save(`ventas_bar_${ahora.toISOString().slice(0, 10)}.pdf`);\r\n  };\r\n\r\n  /* ------------------------------------------------------------\r\n     Render\r\n     ------------------------------------------------------------ */\r\n  return (\r\n    <div className=\"bartender-interface\">\r\n      <h1>Pedidos del Bar</h1>\r\n\r\n      <div className=\"pedidos-grid\">\r\n        {/* Pendientes */}\r\n        <div className=\"columna\">\r\n          <h2>Pedidos Pendientes ({orders.filter((o) => !o.completed).length})</h2>\r\n          {orders\r\n            .filter((o) => !o.completed)\r\n            .map((order, idx) => (\r\n              <div key={`${order.id}-pend-${idx}`} className=\"pedido-card pendiente\">\r\n                <div className=\"pedido-header\">\r\n                  <strong>Mesa {order.table ?? order.mesa}</strong>\r\n                  <span>{order.time ?? new Date(order.timestamp).toLocaleTimeString()}</span>\r\n                </div>\r\n                <div className=\"pedido-items\">\r\n                  {order.items?.map((item, i) => (\r\n                    <div key={`${order.id}-item-${i}`}>\r\n                      {item.name} {item.size ? `(${item.size})` : ''}\r\n                      {item.category === 'botellas' ? ` x${item.quantity || 1}` : ''}\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n                <button className=\"btn-completar\" onClick={() => markAsCompleted(order.id)}>\r\n                  Marcar como Completado\r\n                </button>\r\n              </div>\r\n            ))}\r\n        </div>\r\n\r\n        {/* Completados */}\r\n        <div className=\"columna\">\r\n          <h2>Pedidos Completados ({orders.filter((o) => o.completed).length})</h2>\r\n          {orders\r\n            .filter((o) => o.completed)\r\n            .map((order, idx) => (\r\n              <div key={`${order.id}-comp-${idx}`} className=\"pedido-card completado\">\r\n                <div className=\"pedido-header\">\r\n                  <strong>Mesa {order.table ?? order.mesa}</strong>\r\n                  <span>{order.time ?? new Date(order.timestamp).toLocaleTimeString()}</span>\r\n                </div>\r\n                <div className=\"pedido-items\">\r\n                  {order.items?.map((item, i) => (\r\n                    <div key={`${order.id}-compitem-${i}`}>\r\n                      {item.name} {item.size ? `(${item.size})` : ''}\r\n                      {item.category === 'botellas' ? ` x${item.quantity || 1}` : ''}\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            ))}\r\n          {orders.some((o) => o.completed) && (\r\n            <button className=\"btn-eliminar\" onClick={clearCompletedOrders}>\r\n              Eliminar todas las completadas\r\n            </button>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      <button onClick={() => setShowStats((s) => !s)}>\r\n        {showStats ? 'Ocultar resumen de ventas' : 'Mostrar resumen de ventas'}\r\n      </button>\r\n\r\n      {showStats && (\r\n        <div className=\"stats\">\r\n          <h3>Resumen de Ventas (Histórico)</h3>\r\n          <p>Simples: {statsLedger.simples}</p>\r\n          <p>Dobles: {statsLedger.dobles}</p>\r\n          <p>Triples: {statsLedger.triples}</p>\r\n          <p>Botellas: {statsLedger.botellas}</p>\r\n          <p><strong>Total: ${statsLedger.amount.toFixed(2)}</strong></p>\r\n\r\n          <button style={{ marginTop: 12 }} onClick={downloadPDF}>\r\n            Descargar historial en PDF\r\n          </button>\r\n\r\n          <details style={{ marginTop: 12 }}>\r\n            <summary>Comparar con ventas abiertas (en vivo)</summary>\r\n            <p>Simples (vivo): {statsLive.simples}</p>\r\n            <p>Dobles (vivo): {statsLive.dobles}</p>\r\n            <p>Triples (vivo): {statsLive.triples}</p>\r\n            <p>Botellas (vivo): {statsLive.botellas}</p>\r\n            <p><strong>Total (vivo): ${statsLive.total.toFixed(2)}</strong></p>\r\n          </details>\r\n\r\n          <button className=\"remove-button\" style={{ marginTop: 12 }} onClick={resetLedger}>\r\n            Reiniciar resumen histórico\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Bartender;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}