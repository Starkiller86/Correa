{"ast":null,"code":"// src/services/BarSocket.js\n// ✅ WS del bar (puerto 8090). Sin REST de órdenes.\nclass BarSocket {\n  static getInstance() {\n    if (!BarSocket.instance) BarSocket.instance = new BarSocket();\n    return BarSocket.instance;\n  }\n  constructor() {\n    const host = window.location.hostname;\n    this.wsUrl = `ws://${host}:8090`; // 👈 bar\n    this.baseUrl = `http://${host}:3001`;\n    this.socket = null;\n    this.retryCount = 0;\n    this.handlers = {\n      'bar:new_order': [],\n      'alcohol_updated': [],\n      'initial_data': [],\n      'update': []\n    };\n  }\n  connect() {\n    if (this.socket && this.socket.readyState === WebSocket.OPEN) return;\n    this.socket = new WebSocket(this.wsUrl);\n    this.socket.onopen = () => {\n      console.log('🍹 [bar-socket] Conectado:', this.wsUrl);\n      this.retryCount = 0;\n    };\n    this.socket.onmessage = evt => {\n      var _data;\n      let data;\n      try {\n        data = JSON.parse(evt.data);\n      } catch {\n        return;\n      }\n      const t = (_data = data) === null || _data === void 0 ? void 0 : _data.type;\n      if (!t) return;\n      (this.handlers[t] || []).forEach(fn => {\n        try {\n          fn(data);\n        } catch (e) {\n          console.error(e);\n        }\n      });\n    };\n    this.socket.onclose = () => {\n      console.warn('🍹 [bar-socket] Desconectado, reintentando...');\n      this.scheduleReconnect();\n    };\n    this.socket.onerror = e => console.error('🍹 [bar-socket] Error:', e);\n  }\n  scheduleReconnect() {\n    const d = Math.min(1000 * 2 ** this.retryCount, 30000);\n    this.retryCount++;\n    setTimeout(() => this.connect(), d);\n  }\n  on(type, cb) {\n    (this.handlers[type] ||= []).push(cb);\n  }\n  send(obj) {\n    var _this$socket;\n    if (((_this$socket = this.socket) === null || _this$socket === void 0 ? void 0 : _this$socket.readyState) === WebSocket.OPEN) this.socket.send(JSON.stringify(obj));else console.error('🚫 [bar-socket] No conectado — no se envía', obj);\n  }\n\n  // Catálogo alcohol (sí usa JSON Server)\n  async fetchAlcohol() {\n    const r = await fetch(`${this.baseUrl}/alcohol`);\n    return r.json();\n  }\n  notifyAlcoholUpdated() {\n    this.send({\n      type: 'alcohol_updated'\n    });\n  }\n}\nBarSocket.instance = null;\nexport const barSocket = BarSocket.getInstance();\nexport const initBarSocket = (onOrdersUpdate, onAlcoholUpdated) => {\n  // Snapshot y actualizaciones (lista completa)\n  barSocket.on('initial_data', d => onOrdersUpdate === null || onOrdersUpdate === void 0 ? void 0 : onOrdersUpdate(d.orders || []));\n  barSocket.on('update', d => onOrdersUpdate === null || onOrdersUpdate === void 0 ? void 0 : onOrdersUpdate(d.orders || []));\n  // Evento puntual por si alguien lo escucha\n  barSocket.on('bar:new_order', d => onOrdersUpdate === null || onOrdersUpdate === void 0 ? void 0 : onOrdersUpdate(d.order ? [d.order] : []));\n  // Catálogo\n  barSocket.on('alcohol_updated', () => onAlcoholUpdated === null || onAlcoholUpdated === void 0 ? void 0 : onAlcoholUpdated());\n  barSocket.connect();\n};\nexport const fetchAlcoholItems = () => barSocket.fetchAlcohol();\nexport const placeBarOrder = async order => {\n  const withId = {\n    id: order.id || String(Date.now()),\n    ...order,\n    source: 'bar'\n  };\n  barSocket.send({\n    type: 'bar:new_order',\n    order: withId\n  }); // broadcast inmediato\n  return withId;\n};\nexport const notifyAlcoholUpdated = () => barSocket.notifyAlcoholUpdated();","map":{"version":3,"names":["BarSocket","getInstance","instance","constructor","host","window","location","hostname","wsUrl","baseUrl","socket","retryCount","handlers","connect","readyState","WebSocket","OPEN","onopen","console","log","onmessage","evt","_data","data","JSON","parse","t","type","forEach","fn","e","error","onclose","warn","scheduleReconnect","onerror","d","Math","min","setTimeout","on","cb","push","send","obj","_this$socket","stringify","fetchAlcohol","r","fetch","json","notifyAlcoholUpdated","barSocket","initBarSocket","onOrdersUpdate","onAlcoholUpdated","orders","order","fetchAlcoholItems","placeBarOrder","withId","id","String","Date","now","source"],"sources":["C:/Users/beto_/Downloads/Correa/client/src/services/BarSocket.js"],"sourcesContent":["// src/services/BarSocket.js\r\n// ✅ WS del bar (puerto 8090). Sin REST de órdenes.\r\nclass BarSocket {\r\n  static instance = null;\r\n  static getInstance() {\r\n    if (!BarSocket.instance) BarSocket.instance = new BarSocket();\r\n    return BarSocket.instance;\r\n  }\r\n\r\n  constructor() {\r\n    const host = window.location.hostname;\r\n    this.wsUrl = `ws://${host}:8090`;   // 👈 bar\r\n    this.baseUrl = `http://${host}:3001`;\r\n    this.socket = null;\r\n    this.retryCount = 0;\r\n    this.handlers = { 'bar:new_order': [], 'alcohol_updated': [], 'initial_data': [], 'update': [] };\r\n  }\r\n\r\n  connect() {\r\n    if (this.socket && this.socket.readyState === WebSocket.OPEN) return;\r\n    this.socket = new WebSocket(this.wsUrl);\r\n\r\n    this.socket.onopen = () => { console.log('🍹 [bar-socket] Conectado:', this.wsUrl); this.retryCount = 0; };\r\n    this.socket.onmessage = (evt) => {\r\n      let data; try { data = JSON.parse(evt.data); } catch { return; }\r\n      const t = data?.type; if (!t) return;\r\n      (this.handlers[t] || []).forEach(fn => { try { fn(data); } catch (e) { console.error(e); } });\r\n    };\r\n    this.socket.onclose = () => { console.warn('🍹 [bar-socket] Desconectado, reintentando...'); this.scheduleReconnect(); };\r\n    this.socket.onerror = (e) => console.error('🍹 [bar-socket] Error:', e);\r\n  }\r\n\r\n  scheduleReconnect() {\r\n    const d = Math.min(1000 * (2 ** this.retryCount), 30000);\r\n    this.retryCount++; setTimeout(() => this.connect(), d);\r\n  }\r\n  on(type, cb) { (this.handlers[type] ||= []).push(cb); }\r\n  send(obj) {\r\n    if (this.socket?.readyState === WebSocket.OPEN) this.socket.send(JSON.stringify(obj));\r\n    else console.error('🚫 [bar-socket] No conectado — no se envía', obj);\r\n  }\r\n\r\n  // Catálogo alcohol (sí usa JSON Server)\r\n  async fetchAlcohol() {\r\n    const r = await fetch(`${this.baseUrl}/alcohol`);\r\n    return r.json();\r\n  }\r\n\r\n  notifyAlcoholUpdated() { this.send({ type: 'alcohol_updated' }); }\r\n}\r\n\r\nexport const barSocket = BarSocket.getInstance();\r\n\r\nexport const initBarSocket = (onOrdersUpdate, onAlcoholUpdated) => {\r\n  // Snapshot y actualizaciones (lista completa)\r\n  barSocket.on('initial_data', d => onOrdersUpdate?.(d.orders || []));\r\n  barSocket.on('update',       d => onOrdersUpdate?.(d.orders || []));\r\n  // Evento puntual por si alguien lo escucha\r\n  barSocket.on('bar:new_order', d => onOrdersUpdate?.(d.order ? [d.order] : []));\r\n  // Catálogo\r\n  barSocket.on('alcohol_updated', () => onAlcoholUpdated?.());\r\n  barSocket.connect();\r\n};\r\n\r\nexport const fetchAlcoholItems = () => barSocket.fetchAlcohol();\r\nexport const placeBarOrder = async (order) => {\r\n  const withId = { id: order.id || String(Date.now()), ...order, source: 'bar' };\r\n  barSocket.send({ type: 'bar:new_order', order: withId }); // broadcast inmediato\r\n  return withId;\r\n};\r\nexport const notifyAlcoholUpdated = () => barSocket.notifyAlcoholUpdated();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}