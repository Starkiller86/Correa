{"ast":null,"code":"// services/socket.js\nclass SocketService {\n  static getInstance() {\n    if (!SocketService.instance) {\n      SocketService.instance = new SocketService();\n    }\n    return SocketService.instance;\n  }\n  constructor() {\n    this.socket = null;\n    this.callbacks = {};\n    this.retryCount = 0;\n    const hostname = window.location.hostname;\n    this.wsUrl = `ws://${hostname}:8080`;\n    this.baseUrl = `http://${hostname}:3001`;\n  }\n  connect() {\n    if (this.socket && this.socket.readyState === WebSocket.OPEN) return;\n    this.socket = new WebSocket(this.wsUrl);\n    this.socket.onopen = () => {\n      this.retryCount = 0;\n    };\n    this.socket.onmessage = msg => {\n      try {\n        const data = JSON.parse(msg.data);\n        const t = data === null || data === void 0 ? void 0 : data.type;\n        if (t && this.callbacks[t]) {\n          this.callbacks[t](data);\n        }\n      } catch (e) {\n        console.error('❌ Error procesando mensaje:', e);\n      }\n    };\n    this.socket.onclose = () => this.scheduleReconnect();\n    this.socket.onerror = e => console.error('⚠️ WS error:', e);\n  }\n  scheduleReconnect() {\n    const delay = Math.min(1000 * 2 ** this.retryCount, 30000);\n    this.retryCount += 1;\n    setTimeout(() => this.connect(), delay);\n  }\n  on(type, cb) {\n    this.callbacks[type] = cb;\n  }\n  send(data) {\n    var _this$socket;\n    if (((_this$socket = this.socket) === null || _this$socket === void 0 ? void 0 : _this$socket.readyState) === WebSocket.OPEN) {\n      this.socket.send(JSON.stringify(data));\n    } else {\n      console.warn('WS no abierto');\n    }\n  }\n  async waitForSocketReady(retries = 5) {\n    return new Promise((resolve, reject) => {\n      const check = () => {\n        var _this$socket2;\n        if (((_this$socket2 = this.socket) === null || _this$socket2 === void 0 ? void 0 : _this$socket2.readyState) === WebSocket.OPEN) return resolve();\n        if (retries <= 0) return reject('WebSocket no disponible');\n        setTimeout(() => {\n          retries -= 1;\n          check();\n        }, 500);\n      };\n      check();\n    });\n  }\n\n  // ===== REST\n  async fetchMenu() {\n    const r = await fetch(`${this.baseUrl}/dishes`);\n    return r.json();\n  }\n  async fetchAlcohol() {\n    const r = await fetch(`${this.baseUrl}/alcohol`);\n    return r.json();\n  }\n  async createOrder(o) {\n    const r = await fetch(`${this.baseUrl}/orders`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(o)\n    });\n    return r.json();\n  }\n  async completeOrder(id) {\n    const r = await fetch(`${this.baseUrl}/orders/${id}`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        status: 'completed'\n      })\n    });\n    return r.json();\n  }\n}\n\n// Singleton\nSocketService.instance = null;\nexport const socket = SocketService.getInstance();\n\n/** Inicializa subscripción POR NAMESPACE (bar | kitchen) */\nexport const initializeSocketConnection = (namespace, onOrders) => {\n  socket.on(`${namespace}:initial_data`, ({\n    orders\n  }) => onOrders === null || onOrders === void 0 ? void 0 : onOrders({\n    orders: orders || []\n  }));\n  socket.on(`${namespace}:update`, ({\n    orders\n  }) => onOrders === null || onOrders === void 0 ? void 0 : onOrders({\n    orders: orders || []\n  }));\n  socket.connect();\n};\n\n// Fetch helpers\nexport const fetchMenuItems = () => socket.fetchMenu();\nexport const fetchAlcoholItems = () => socket.fetchAlcohol();\n\n/** Enviar pedido POR NAMESPACE (bar | kitchen) */\nexport const placeNewOrderNS = async (namespace, order) => {\n  try {\n    const saved = await socket.createOrder(order);\n    await socket.waitForSocketReady();\n    socket.send({\n      type: `${namespace}:new_order`,\n      order: saved\n    });\n    return saved;\n  } catch (err) {\n    console.error('❌ No se pudo enviar pedido:', err);\n    throw err;\n  }\n};\n\n/** Marcar completado POR NAMESPACE */\nexport const markOrderAsCompletedNS = async (namespace, orderId) => {\n  try {\n    await socket.completeOrder(orderId);\n    await socket.waitForSocketReady();\n    socket.send({\n      type: `${namespace}:complete_order`,\n      orderId\n    });\n  } catch (err) {\n    console.error('❌ No se pudo completar pedido:', err);\n    throw err;\n  }\n};","map":{"version":3,"names":["SocketService","getInstance","instance","constructor","socket","callbacks","retryCount","hostname","window","location","wsUrl","baseUrl","connect","readyState","WebSocket","OPEN","onopen","onmessage","msg","data","JSON","parse","t","type","e","console","error","onclose","scheduleReconnect","onerror","delay","Math","min","setTimeout","on","cb","send","_this$socket","stringify","warn","waitForSocketReady","retries","Promise","resolve","reject","check","_this$socket2","fetchMenu","r","fetch","json","fetchAlcohol","createOrder","o","method","headers","body","completeOrder","id","status","initializeSocketConnection","namespace","onOrders","orders","fetchMenuItems","fetchAlcoholItems","placeNewOrderNS","order","saved","err","markOrderAsCompletedNS","orderId"],"sources":["C:/Users/karen/OneDrive/Escritorio/Correa3/Correa/client/src/services/socket.js"],"sourcesContent":["// services/socket.js\r\nclass SocketService {\r\n  static instance = null;\r\n\r\n  static getInstance() {\r\n    if (!SocketService.instance) {\r\n      SocketService.instance = new SocketService();\r\n    }\r\n    return SocketService.instance;\r\n  }\r\n\r\n  constructor() {\r\n    this.socket = null;\r\n    this.callbacks = {};\r\n    this.retryCount = 0;\r\n\r\n    const hostname = window.location.hostname;\r\n    this.wsUrl = `ws://${hostname}:8080`;\r\n    this.baseUrl = `http://${hostname}:3001`;\r\n  }\r\n\r\n  connect() {\r\n    if (this.socket && this.socket.readyState === WebSocket.OPEN) return;\r\n    this.socket = new WebSocket(this.wsUrl);\r\n\r\n    this.socket.onopen = () => {\r\n      this.retryCount = 0;\r\n    };\r\n\r\n    this.socket.onmessage = (msg) => {\r\n      try {\r\n        const data = JSON.parse(msg.data);\r\n        const t = data?.type;\r\n        if (t && this.callbacks[t]) {\r\n          this.callbacks[t](data);\r\n        }\r\n      } catch (e) {\r\n        console.error('❌ Error procesando mensaje:', e);\r\n      }\r\n    };\r\n\r\n    this.socket.onclose = () => this.scheduleReconnect();\r\n    this.socket.onerror = (e) => console.error('⚠️ WS error:', e);\r\n  }\r\n\r\n  scheduleReconnect() {\r\n    const delay = Math.min(1000 * (2 ** this.retryCount), 30000);\r\n    this.retryCount += 1;\r\n    setTimeout(() => this.connect(), delay);\r\n  }\r\n\r\n  on(type, cb) { this.callbacks[type] = cb; }\r\n\r\n  send(data) {\r\n    if (this.socket?.readyState === WebSocket.OPEN) {\r\n      this.socket.send(JSON.stringify(data));\r\n    } else {\r\n      console.warn('WS no abierto');\r\n    }\r\n  }\r\n\r\n  async waitForSocketReady(retries = 5) {\r\n    return new Promise((resolve, reject) => {\r\n      const check = () => {\r\n        if (this.socket?.readyState === WebSocket.OPEN) return resolve();\r\n        if (retries <= 0) return reject('WebSocket no disponible');\r\n        setTimeout(() => { retries -= 1; check(); }, 500);\r\n      };\r\n      check();\r\n    });\r\n  }\r\n\r\n  // ===== REST\r\n  async fetchMenu()      { const r = await fetch(`${this.baseUrl}/dishes`);  return r.json(); }\r\n  async fetchAlcohol()   { const r = await fetch(`${this.baseUrl}/alcohol`); return r.json(); }\r\n  async createOrder(o)   { const r = await fetch(`${this.baseUrl}/orders`, { method:'POST', headers:{'Content-Type':'application/json'}, body:JSON.stringify(o)}); return r.json(); }\r\n  async completeOrder(id){ const r = await fetch(`${this.baseUrl}/orders/${id}`, { method:'PATCH', headers:{'Content-Type':'application/json'}, body:JSON.stringify({status:'completed'})}); return r.json(); }\r\n}\r\n\r\n// Singleton\r\nexport const socket = SocketService.getInstance();\r\n\r\n/** Inicializa subscripción POR NAMESPACE (bar | kitchen) */\r\nexport const initializeSocketConnection = (namespace, onOrders) => {\r\n  socket.on(`${namespace}:initial_data`, ({ orders }) => onOrders?.({ orders: orders || [] }));\r\n  socket.on(`${namespace}:update`,       ({ orders }) => onOrders?.({ orders: orders || [] }));\r\n  socket.connect();\r\n};\r\n\r\n// Fetch helpers\r\nexport const fetchMenuItems    = () => socket.fetchMenu();\r\nexport const fetchAlcoholItems = () => socket.fetchAlcohol();\r\n\r\n/** Enviar pedido POR NAMESPACE (bar | kitchen) */\r\nexport const placeNewOrderNS = async (namespace, order) => {\r\n  try {\r\n    const saved = await socket.createOrder(order);\r\n    await socket.waitForSocketReady();\r\n    socket.send({ type: `${namespace}:new_order`, order: saved });\r\n    return saved;\r\n  } catch (err) {\r\n    console.error('❌ No se pudo enviar pedido:', err);\r\n    throw err;\r\n  }\r\n};\r\n\r\n/** Marcar completado POR NAMESPACE */\r\nexport const markOrderAsCompletedNS = async (namespace, orderId) => {\r\n  try {\r\n    await socket.completeOrder(orderId);\r\n    await socket.waitForSocketReady();\r\n    socket.send({ type: `${namespace}:complete_order`, orderId });\r\n  } catch (err) {\r\n    console.error('❌ No se pudo completar pedido:', err);\r\n    throw err;\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}