{"ast":null,"code":"// client/src/services/socket.js\nclass SocketService {\n  static getInstance() {\n    if (!SocketService.instance) {\n      SocketService.instance = new SocketService();\n    }\n    return SocketService.instance;\n  }\n  constructor() {\n    this.socket = null;\n    this.callbacks = {};\n    this.retryCount = 0;\n    this.baseUrl = 'http://localhost:3001'; // URL de JSON Server\n  }\n\n  /* Conexión WebSocket */\n  connect(callback) {\n    try {\n      this.socket = new WebSocket('ws://192.168.101.102:8080');\n      this.socket.onopen = () => {\n        console.log('WebSocket conectado');\n        this.retryCount = 0;\n        if (callback) callback();\n      };\n      this.socket.onmessage = msg => {\n        try {\n          const data = JSON.parse(msg.data);\n          if (this.callbacks[data.type]) {\n            this.callbacks[data.type](data);\n          }\n        } catch (error) {\n          console.error('Error procesando mensaje:', error);\n        }\n      };\n      this.socket.onclose = () => {\n        console.log('WebSocket desconectado');\n        this.scheduleReconnect();\n      };\n      this.socket.onerror = error => {\n        console.error('Error WebSocket:', error);\n      };\n    } catch (error) {\n      console.error('Error al conectar:', error);\n      this.scheduleReconnect();\n    }\n  }\n  scheduleReconnect() {\n    const delay = Math.min(1000 * 2 ** this.retryCount, 30000);\n    this.retryCount += 1;\n    setTimeout(() => this.connect(), delay);\n  }\n  on(event, callback) {\n    this.callbacks[event] = callback;\n  }\n  send(data) {\n    var _this$socket;\n    if (((_this$socket = this.socket) === null || _this$socket === void 0 ? void 0 : _this$socket.readyState) === WebSocket.OPEN) {\n      this.socket.send(JSON.stringify(data));\n    } else {\n      console.error('WebSocket no está conectado');\n    }\n  }\n\n  /* Métodos REST API */\n  async fetchMenu() {\n    const response = await fetch(`${this.baseUrl}/dishes`);\n    return await response.json();\n  }\n  async createOrder(order) {\n    const response = await fetch(`${this.baseUrl}/orders`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(order)\n    });\n    return await response.json();\n  }\n  async completeOrder(orderId) {\n    const response = await fetch(`${this.baseUrl}/orders/${orderId}`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        status: 'completed'\n      })\n    });\n    return await response.json();\n  }\n}\n\n// Exportación de funciones principales\nSocketService.instance = null;\nexport const socket = SocketService.getInstance();\nexport const initializeSocketConnection = onOrderUpdate => {\n  socket.on('initial_data', onOrderUpdate);\n  socket.on('update', onOrderUpdate);\n  socket.connect();\n};\nexport const fetchMenuItems = () => socket.fetchMenu();\nexport const placeNewOrder = async order => {\n  await socket.createOrder(order);\n  socket.send({\n    type: 'new_order',\n    order\n  });\n};\nexport const markOrderAsCompleted = async orderId => {\n  await socket.completeOrder(orderId);\n  socket.send({\n    type: 'complete_order',\n    orderId\n  });\n};","map":{"version":3,"names":["SocketService","getInstance","instance","constructor","socket","callbacks","retryCount","baseUrl","connect","callback","WebSocket","onopen","console","log","onmessage","msg","data","JSON","parse","type","error","onclose","scheduleReconnect","onerror","delay","Math","min","setTimeout","on","event","send","_this$socket","readyState","OPEN","stringify","fetchMenu","response","fetch","json","createOrder","order","method","headers","body","completeOrder","orderId","status","initializeSocketConnection","onOrderUpdate","fetchMenuItems","placeNewOrder","markOrderAsCompleted"],"sources":["C:/Users/karen/OneDrive/Escritorio/Correa3/Correa/client/src/services/socket.js"],"sourcesContent":["// client/src/services/socket.js\r\nclass SocketService {\r\n  static instance = null;\r\n  \r\n  static getInstance() {\r\n    if (!SocketService.instance) {\r\n      SocketService.instance = new SocketService();\r\n    }\r\n    return SocketService.instance;\r\n  }\r\n\r\n  constructor() {\r\n    this.socket = null;\r\n    this.callbacks = {};\r\n    this.retryCount = 0;\r\n    this.baseUrl = 'http://localhost:3001'; // URL de JSON Server\r\n  }\r\n\r\n  /* Conexión WebSocket */\r\n  connect(callback) {\r\n    try {\r\n      this.socket = new WebSocket('ws://192.168.101.102:8080');\r\n\r\n      this.socket.onopen = () => {\r\n        console.log('WebSocket conectado');\r\n        this.retryCount = 0;\r\n        if (callback) callback();\r\n      };\r\n\r\n      this.socket.onmessage = (msg) => {\r\n        try {\r\n          const data = JSON.parse(msg.data);\r\n          if (this.callbacks[data.type]) {\r\n            this.callbacks[data.type](data);\r\n          }\r\n        } catch (error) {\r\n          console.error('Error procesando mensaje:', error);\r\n        }\r\n      };\r\n\r\n      this.socket.onclose = () => {\r\n        console.log('WebSocket desconectado');\r\n        this.scheduleReconnect();\r\n      };\r\n\r\n      this.socket.onerror = (error) => {\r\n        console.error('Error WebSocket:', error);\r\n      };\r\n\r\n    } catch (error) {\r\n      console.error('Error al conectar:', error);\r\n      this.scheduleReconnect();\r\n    }\r\n  }\r\n\r\n  scheduleReconnect() {\r\n    const delay = Math.min(1000 * (2 ** this.retryCount), 30000);\r\n    this.retryCount += 1;\r\n    setTimeout(() => this.connect(), delay);\r\n  }\r\n\r\n  on(event, callback) {\r\n    this.callbacks[event] = callback;\r\n  }\r\n\r\n  send(data) {\r\n    if (this.socket?.readyState === WebSocket.OPEN) {\r\n      this.socket.send(JSON.stringify(data));\r\n    } else {\r\n      console.error('WebSocket no está conectado');\r\n    }\r\n  }\r\n\r\n  /* Métodos REST API */\r\n  async fetchMenu() {\r\n    const response = await fetch(`${this.baseUrl}/dishes`);\r\n    return await response.json();\r\n  }\r\n\r\n  async createOrder(order) {\r\n    const response = await fetch(`${this.baseUrl}/orders`, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(order)\r\n    });\r\n    return await response.json();\r\n  }\r\n\r\n  async completeOrder(orderId) {\r\n    const response = await fetch(`${this.baseUrl}/orders/${orderId}`, {\r\n      method: 'PATCH',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ status: 'completed' })\r\n    });\r\n    return await response.json();\r\n  }\r\n}\r\n\r\n// Exportación de funciones principales\r\nexport const socket = SocketService.getInstance();\r\n\r\nexport const initializeSocketConnection = (onOrderUpdate) => {\r\n  socket.on('initial_data', onOrderUpdate);\r\n  socket.on('update', onOrderUpdate);\r\n  socket.connect();\r\n};\r\n\r\nexport const fetchMenuItems = () => socket.fetchMenu();\r\n\r\nexport const placeNewOrder = async (order) => {\r\n  await socket.createOrder(order);\r\n  socket.send({ type: 'new_order', order });\r\n};\r\n\r\nexport const markOrderAsCompleted = async (orderId) => {\r\n  await socket.completeOrder(orderId);\r\n  socket.send({ type: 'complete_order', orderId });\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}