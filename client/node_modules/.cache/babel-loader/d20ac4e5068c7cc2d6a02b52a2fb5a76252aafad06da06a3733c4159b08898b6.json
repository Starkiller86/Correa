{"ast":null,"code":"// src/services/socket.js\n// ✅ WS de cocina con “fallback” si /orders no existe\nclass SocketService {\n  static getInstance() {\n    if (!SocketService.instance) SocketService.instance = new SocketService();\n    return SocketService.instance;\n  }\n  constructor() {\n    const host = window.location.hostname;\n    this.wsUrl = `ws://${host}:8080`; // 👈 cocina\n    this.baseUrl = `http://${host}:3001`;\n    this.socket = null;\n    this.retryCount = 0;\n    this.handlers = {\n      initial_data: [],\n      update: [],\n      menu_updated: []\n    };\n  }\n  connect() {\n    if (this.socket && this.socket.readyState === WebSocket.OPEN) return;\n    this.socket = new WebSocket(this.wsUrl);\n    this.socket.onopen = () => {\n      console.log('✅ [socket] Conectado:', this.wsUrl);\n      this.retryCount = 0;\n    };\n    this.socket.onmessage = evt => {\n      var _data;\n      let data;\n      try {\n        data = JSON.parse(evt.data);\n      } catch {\n        return;\n      }\n      const t = (_data = data) === null || _data === void 0 ? void 0 : _data.type;\n      if (!t) return;\n      (this.handlers[t] || []).forEach(fn => {\n        try {\n          fn(data);\n        } catch (e) {\n          console.error(e);\n        }\n      });\n    };\n    this.socket.onclose = () => {\n      console.warn('🔌 [socket] Desconectado, reintentando...');\n      this.scheduleReconnect();\n    };\n    this.socket.onerror = err => console.error('⚠️ [socket] Error:', err);\n  }\n  scheduleReconnect() {\n    const delay = Math.min(1000 * 2 ** this.retryCount, 30000);\n    this.retryCount++;\n    setTimeout(() => this.connect(), delay);\n  }\n  on(type, cb) {\n    (this.handlers[type] ||= []).push(cb);\n  }\n  send(obj) {\n    var _this$socket;\n    if (((_this$socket = this.socket) === null || _this$socket === void 0 ? void 0 : _this$socket.readyState) === WebSocket.OPEN) this.socket.send(JSON.stringify(obj));else console.error('🚫 [socket] No conectado — no se envía', obj);\n  }\n\n  // -------- REST de menú (sigue igual) --------\n  async fetchMenu() {\n    const r = await fetch(`${this.baseUrl}/dishes`);\n    return r.json();\n  }\n\n  // -------- CRUD /orders con fallback --------\n  async createOrder(order) {\n    try {\n      const r = await fetch(`${this.baseUrl}/orders`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(order)\n      });\n      if (!r.ok) throw new Error(`REST /orders ${r.status}`);\n      return await r.json();\n    } catch (err) {\n      console.warn('[socket] /orders no disponible → usando SOLO WS', err);\n      return order; // devolvemos el objeto tal cual\n    }\n  }\n  async completeOrder(orderId) {\n    try {\n      const r = await fetch(`${this.baseUrl}/orders/${orderId}`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          status: 'completed'\n        })\n      });\n      if (!r.ok) throw new Error(`REST /orders/${orderId} ${r.status}`);\n      return await r.json();\n    } catch (err) {\n      console.warn('[socket] PATCH /orders/* no disponible → solo WS', err);\n      return {\n        id: orderId,\n        status: 'completed'\n      };\n    }\n  }\n  notifyMenuUpdated() {\n    this.send({\n      type: 'menu_updated'\n    });\n  }\n}\nSocketService.instance = null;\nexport const socket = SocketService.getInstance();\nexport const initializeSocketConnection = onOrders => {\n  socket.on('initial_data', d => onOrders === null || onOrders === void 0 ? void 0 : onOrders(d.orders || []));\n  socket.on('update', d => onOrders === null || onOrders === void 0 ? void 0 : onOrders(d.orders || []));\n  socket.on('menu_updated', () => onOrders === null || onOrders === void 0 ? void 0 : onOrders('__MENU_UPDATED__'));\n  socket.connect();\n};\n\n// Helpers\nexport const fetchMenuItems = () => socket.fetchMenu();\nexport const placeNewOrder = async order => {\n  const withId = {\n    id: order.id || String(Date.now()),\n    ...order,\n    source: 'kitchen'\n  };\n  const saved = await socket.createOrder(withId);\n  socket.send({\n    type: 'new_order',\n    order: saved\n  }); // 👈 SIEMPRE notificamos por WS\n  return saved;\n};\nexport const markOrderAsCompleted = async orderId => {\n  const updated = await socket.completeOrder(orderId);\n  socket.send({\n    type: 'complete_order',\n    orderId\n  });\n  return updated;\n};\nexport const notifyMenuUpdated = () => socket.notifyMenuUpdated();","map":{"version":3,"names":["SocketService","getInstance","instance","constructor","host","window","location","hostname","wsUrl","baseUrl","socket","retryCount","handlers","initial_data","update","menu_updated","connect","readyState","WebSocket","OPEN","onopen","console","log","onmessage","evt","_data","data","JSON","parse","t","type","forEach","fn","e","error","onclose","warn","scheduleReconnect","onerror","err","delay","Math","min","setTimeout","on","cb","push","send","obj","_this$socket","stringify","fetchMenu","r","fetch","json","createOrder","order","method","headers","body","ok","Error","status","completeOrder","orderId","id","notifyMenuUpdated","initializeSocketConnection","onOrders","d","orders","fetchMenuItems","placeNewOrder","withId","String","Date","now","source","saved","markOrderAsCompleted","updated"],"sources":["C:/Users/karen/OneDrive/Escritorio/Correa3/coorrea/Correa/client/src/services/socket.js"],"sourcesContent":["// src/services/socket.js\r\n// ✅ WS de cocina con “fallback” si /orders no existe\r\nclass SocketService {\r\n  static instance = null;\r\n  static getInstance() {\r\n    if (!SocketService.instance) SocketService.instance = new SocketService();\r\n    return SocketService.instance;\r\n  }\r\n\r\n  constructor() {\r\n    const host = window.location.hostname;\r\n    this.wsUrl = `ws://${host}:8080`;   // 👈 cocina\r\n    this.baseUrl = `http://${host}:3001`;\r\n    this.socket = null;\r\n    this.retryCount = 0;\r\n    this.handlers = { initial_data: [], update: [], menu_updated: [] };\r\n  }\r\n\r\n  connect() {\r\n    if (this.socket && this.socket.readyState === WebSocket.OPEN) return;\r\n    this.socket = new WebSocket(this.wsUrl);\r\n\r\n    this.socket.onopen = () => { console.log('✅ [socket] Conectado:', this.wsUrl); this.retryCount = 0; };\r\n    this.socket.onmessage = (evt) => {\r\n      let data; try { data = JSON.parse(evt.data); } catch { return; }\r\n      const t = data?.type; if (!t) return;\r\n      (this.handlers[t] || []).forEach(fn => { try { fn(data); } catch (e) { console.error(e); } });\r\n    };\r\n    this.socket.onclose = () => { console.warn('🔌 [socket] Desconectado, reintentando...'); this.scheduleReconnect(); };\r\n    this.socket.onerror = (err) => console.error('⚠️ [socket] Error:', err);\r\n  }\r\n  scheduleReconnect() {\r\n    const delay = Math.min(1000 * (2 ** this.retryCount), 30000);\r\n    this.retryCount++; setTimeout(() => this.connect(), delay);\r\n  }\r\n  on(type, cb) { (this.handlers[type] ||= []).push(cb); }\r\n  send(obj) {\r\n    if (this.socket?.readyState === WebSocket.OPEN) this.socket.send(JSON.stringify(obj));\r\n    else console.error('🚫 [socket] No conectado — no se envía', obj);\r\n  }\r\n\r\n  // -------- REST de menú (sigue igual) --------\r\n  async fetchMenu() {\r\n    const r = await fetch(`${this.baseUrl}/dishes`);\r\n    return r.json();\r\n  }\r\n\r\n  // -------- CRUD /orders con fallback --------\r\n  async createOrder(order) {\r\n    try {\r\n      const r = await fetch(`${this.baseUrl}/orders`, {\r\n        method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(order),\r\n      });\r\n      if (!r.ok) throw new Error(`REST /orders ${r.status}`);\r\n      return await r.json();\r\n    } catch (err) {\r\n      console.warn('[socket] /orders no disponible → usando SOLO WS', err);\r\n      return order; // devolvemos el objeto tal cual\r\n    }\r\n  }\r\n\r\n  async completeOrder(orderId) {\r\n    try {\r\n      const r = await fetch(`${this.baseUrl}/orders/${orderId}`, {\r\n        method: 'PATCH', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ status: 'completed' }),\r\n      });\r\n      if (!r.ok) throw new Error(`REST /orders/${orderId} ${r.status}`);\r\n      return await r.json();\r\n    } catch (err) {\r\n      console.warn('[socket] PATCH /orders/* no disponible → solo WS', err);\r\n      return { id: orderId, status: 'completed' };\r\n    }\r\n  }\r\n\r\n  notifyMenuUpdated() { this.send({ type: 'menu_updated' }); }\r\n}\r\n\r\nexport const socket = SocketService.getInstance();\r\n\r\nexport const initializeSocketConnection = (onOrders) => {\r\n  socket.on('initial_data', d => onOrders?.(d.orders || []));\r\n  socket.on('update',       d => onOrders?.(d.orders || []));\r\n  socket.on('menu_updated', () => onOrders?.('__MENU_UPDATED__'));\r\n  socket.connect();\r\n};\r\n\r\n// Helpers\r\nexport const fetchMenuItems   = () => socket.fetchMenu();\r\nexport const placeNewOrder    = async (order) => {\r\n  const withId = { id: order.id || String(Date.now()), ...order, source: 'kitchen' };\r\n  const saved  = await socket.createOrder(withId);\r\n  socket.send({ type: 'new_order', order: saved });     // 👈 SIEMPRE notificamos por WS\r\n  return saved;\r\n};\r\nexport const markOrderAsCompleted = async (orderId) => {\r\n  const updated = await socket.completeOrder(orderId);\r\n  socket.send({ type: 'complete_order', orderId });\r\n  return updated;\r\n};\r\nexport const notifyMenuUpdated = () => socket.notifyMenuUpdated();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}