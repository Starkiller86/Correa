{"ast":null,"code":"// services/BarSocket.js\n// WS dedicado al BAR: solo procesa eventos \"bar:*\" y filtra cualquier cosa que no sea del bar.\n\nclass BarWS {\n  static getInstance() {\n    if (!BarWS.instance) BarWS.instance = new BarWS();\n    return BarWS.instance;\n  }\n  constructor() {\n    this.ws = null;\n    this.onOrders = null; // callback(ordersArray)\n    this.retry = 0;\n    const host = window.location.hostname;\n    this.wsUrl = `ws://${host}:8080`;\n    this.baseUrl = `http://${host}:3001`;\n  }\n  connect() {\n    if (this.ws && this.ws.readyState === WebSocket.OPEN) return;\n    this.ws = new WebSocket(this.wsUrl);\n    this.ws.onopen = () => {\n      this.retry = 0;\n    };\n    this.ws.onmessage = evt => {\n      var _data, _this$onOrders;\n      let data;\n      try {\n        data = JSON.parse(evt.data);\n      } catch {\n        return;\n      }\n      const type = (_data = data) === null || _data === void 0 ? void 0 : _data.type;\n      if (!type || !type.startsWith('bar:')) return; // ðŸ”’ solo mensajes del bar\n\n      // Normalizamos a array y filtramos por source==='bar'\n      const arr = Array.isArray(data.orders) ? data.orders : Array.isArray(data.order) ? data.order : data.order ? [data.order] : [];\n      const onlyBar = (arr || []).filter(o => ((o === null || o === void 0 ? void 0 : o.source) || 'bar') === 'bar');\n      if (!onlyBar.length) return;\n\n      // Deduplicar por id dentro del batch\n      const unique = Array.from(new Map(onlyBar.map(o => [o.id, o])).values());\n      (_this$onOrders = this.onOrders) === null || _this$onOrders === void 0 ? void 0 : _this$onOrders.call(this, unique);\n    };\n    this.ws.onclose = () => this.reconnect();\n    this.ws.onerror = () => this.reconnect();\n  }\n  reconnect() {\n    const delay = Math.min(1000 * 2 ** this.retry++, 30000);\n    setTimeout(() => this.connect(), delay);\n  }\n}\nBarWS.instance = null;\nexport const initBarSocket = onOrdersArray => {\n  const inst = BarWS.getInstance();\n  inst.onOrders = onOrdersArray;\n  inst.connect();\n};\n\n// Enviar pedido del BAR (guarda opcional en REST si usas json-server)\nexport const placeBarOrder = async order => {\n  var _inst$ws;\n  const host = window.location.hostname;\n  const payload = {\n    ...order,\n    source: 'bar'\n  };\n\n  // REST opcional (ignora error si no usas /alcohol_orders)\n  try {\n    await fetch(`http://${host}:3001/alcohol_orders`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(payload)\n    });\n  } catch (_) {}\n\n  // Notifica por WS\n  const inst = BarWS.getInstance();\n  if (((_inst$ws = inst.ws) === null || _inst$ws === void 0 ? void 0 : _inst$ws.readyState) === WebSocket.OPEN) {\n    inst.ws.send(JSON.stringify({\n      type: 'bar:new_order',\n      order: [payload]\n    }));\n  }\n  return payload;\n};","map":{"version":3,"names":["BarWS","getInstance","instance","constructor","ws","onOrders","retry","host","window","location","hostname","wsUrl","baseUrl","connect","readyState","WebSocket","OPEN","onopen","onmessage","evt","_data","_this$onOrders","data","JSON","parse","type","startsWith","arr","Array","isArray","orders","order","onlyBar","filter","o","source","length","unique","from","Map","map","id","values","call","onclose","reconnect","onerror","delay","Math","min","setTimeout","initBarSocket","onOrdersArray","inst","placeBarOrder","_inst$ws","payload","fetch","method","headers","body","stringify","_","send"],"sources":["C:/Users/karen/OneDrive/Escritorio/Correa3/Correa/client/src/services/BarSocket.js"],"sourcesContent":["// services/BarSocket.js\r\n// WS dedicado al BAR: solo procesa eventos \"bar:*\" y filtra cualquier cosa que no sea del bar.\r\n\r\nclass BarWS {\r\n  static instance = null;\r\n  static getInstance() {\r\n    if (!BarWS.instance) BarWS.instance = new BarWS();\r\n    return BarWS.instance;\r\n  }\r\n\r\n  constructor() {\r\n    this.ws = null;\r\n    this.onOrders = null; // callback(ordersArray)\r\n    this.retry = 0;\r\n    const host = window.location.hostname;\r\n    this.wsUrl = `ws://${host}:8080`;\r\n    this.baseUrl = `http://${host}:3001`;\r\n  }\r\n\r\n  connect() {\r\n    if (this.ws && this.ws.readyState === WebSocket.OPEN) return;\r\n    this.ws = new WebSocket(this.wsUrl);\r\n\r\n    this.ws.onopen = () => { this.retry = 0; };\r\n\r\n    this.ws.onmessage = (evt) => {\r\n      let data;\r\n      try { data = JSON.parse(evt.data); } catch { return; }\r\n      const type = data?.type;\r\n      if (!type || !type.startsWith('bar:')) return; // ðŸ”’ solo mensajes del bar\r\n\r\n      // Normalizamos a array y filtramos por source==='bar'\r\n      const arr = Array.isArray(data.orders) ? data.orders\r\n               : Array.isArray(data.order)  ? data.order\r\n               : data.order ? [data.order] : [];\r\n\r\n      const onlyBar = (arr || []).filter(o => (o?.source || 'bar') === 'bar');\r\n      if (!onlyBar.length) return;\r\n\r\n      // Deduplicar por id dentro del batch\r\n      const unique = Array.from(new Map(onlyBar.map(o => [o.id, o])).values());\r\n      this.onOrders?.(unique);\r\n    };\r\n\r\n    this.ws.onclose = () => this.reconnect();\r\n    this.ws.onerror  = () => this.reconnect();\r\n  }\r\n\r\n  reconnect() {\r\n    const delay = Math.min(1000 * (2 ** this.retry++), 30000);\r\n    setTimeout(() => this.connect(), delay);\r\n  }\r\n}\r\n\r\nexport const initBarSocket = (onOrdersArray) => {\r\n  const inst = BarWS.getInstance();\r\n  inst.onOrders = onOrdersArray;\r\n  inst.connect();\r\n};\r\n\r\n// Enviar pedido del BAR (guarda opcional en REST si usas json-server)\r\nexport const placeBarOrder = async (order) => {\r\n  const host = window.location.hostname;\r\n  const payload = { ...order, source: 'bar' };\r\n\r\n  // REST opcional (ignora error si no usas /alcohol_orders)\r\n  try {\r\n    await fetch(`http://${host}:3001/alcohol_orders`, {\r\n      method: 'POST',\r\n      headers: {'Content-Type':'application/json'},\r\n      body: JSON.stringify(payload),\r\n    });\r\n  } catch (_) {}\r\n\r\n  // Notifica por WS\r\n  const inst = BarWS.getInstance();\r\n  if (inst.ws?.readyState === WebSocket.OPEN) {\r\n    inst.ws.send(JSON.stringify({ type: 'bar:new_order', order: [payload] }));\r\n  }\r\n  return payload;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}